
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000620  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000694  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  00000694  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014b7  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000678  00000000  00000000  00001cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b51  00000000  00000000  00002373  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000380  00000000  00000000  00002ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005dc  00000000  00000000  00003244  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f02  00000000  00000000  00003820  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00004722  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1e c0       	rjmp	.+60     	; 0x3e <__ctors_end>
   2:	4b c1       	rjmp	.+662    	; 0x29a <__vector_1>
   4:	05 c2       	rjmp	.+1034   	; 0x410 <__vector_2>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	a0 c2       	rjmp	.+1344   	; 0x54a <__vector_4>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	19 c0       	rjmp	.+50     	; 0x5a <__bad_interrupt>
  28:	18 c0       	rjmp	.+48     	; 0x5a <__bad_interrupt>
  2a:	63 c0       	rjmp	.+198    	; 0xf2 <__stack+0x13>
  2c:	4e c0       	rjmp	.+156    	; 0xca <bin_to_tm1637_digit+0x10>
  2e:	4f c0       	rjmp	.+158    	; 0xce <bin_to_tm1637_digit+0x14>
  30:	50 c0       	rjmp	.+160    	; 0xd2 <bin_to_tm1637_digit+0x18>
  32:	51 c0       	rjmp	.+162    	; 0xd6 <bin_to_tm1637_digit+0x1c>
  34:	52 c0       	rjmp	.+164    	; 0xda <bin_to_tm1637_digit+0x20>
  36:	53 c0       	rjmp	.+166    	; 0xde <bin_to_tm1637_digit+0x24>
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__stack+0x3>
  3a:	55 c0       	rjmp	.+170    	; 0xe6 <__stack+0x7>
  3c:	56 c0       	rjmp	.+172    	; 0xea <__stack+0xb>

0000003e <__ctors_end>:
  3e:	11 24       	eor	r1, r1
  40:	1f be       	out	0x3f, r1	; 63
  42:	cf ed       	ldi	r28, 0xDF	; 223
  44:	cd bf       	out	0x3d, r28	; 61

00000046 <__do_clear_bss>:
  46:	20 e0       	ldi	r18, 0x00	; 0
  48:	a0 e6       	ldi	r26, 0x60	; 96
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	01 c0       	rjmp	.+2      	; 0x50 <.do_clear_bss_start>

0000004e <.do_clear_bss_loop>:
  4e:	1d 92       	st	X+, r1

00000050 <.do_clear_bss_start>:
  50:	a0 37       	cpi	r26, 0x70	; 112
  52:	b2 07       	cpc	r27, r18
  54:	e1 f7       	brne	.-8      	; 0x4e <.do_clear_bss_loop>
  56:	53 d1       	rcall	.+678    	; 0x2fe <main>
  58:	e1 c2       	rjmp	.+1474   	; 0x61c <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <bin8bcd>:
//		Пример: 0xab -> 0x0b
//=======================================================
uint8_t half_byteL(uint8_t digit)
{
	return (digit & 0x0f);
  5c:	28 2f       	mov	r18, r24
  5e:	30 e0       	ldi	r19, 0x00	; 0
  60:	12 16       	cp	r1, r18
  62:	13 06       	cpc	r1, r19
  64:	4c f4       	brge	.+18     	; 0x78 <bin8bcd+0x1c>
  66:	80 e0       	ldi	r24, 0x00	; 0
  68:	2a 50       	subi	r18, 0x0A	; 10
  6a:	31 09       	sbc	r19, r1
  6c:	0a f0       	brmi	.+2      	; 0x70 <bin8bcd+0x14>
  6e:	8f 5f       	subi	r24, 0xFF	; 255
  70:	12 16       	cp	r1, r18
  72:	13 06       	cpc	r1, r19
  74:	cc f3       	brlt	.-14     	; 0x68 <bin8bcd+0xc>
  76:	01 c0       	rjmp	.+2      	; 0x7a <bin8bcd+0x1e>
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	33 23       	and	r19, r19
  7c:	14 f4       	brge	.+4      	; 0x82 <bin8bcd+0x26>
  7e:	26 5f       	subi	r18, 0xF6	; 246
  80:	01 c0       	rjmp	.+2      	; 0x84 <bin8bcd+0x28>
  82:	20 e0       	ldi	r18, 0x00	; 0
  84:	82 95       	swap	r24
  86:	80 7f       	andi	r24, 0xF0	; 240
  88:	82 2b       	or	r24, r18
  8a:	08 95       	ret

0000008c <bcd8bin>:
  8c:	98 2f       	mov	r25, r24
  8e:	9f 70       	andi	r25, 0x0F	; 15
  90:	82 95       	swap	r24
  92:	8f 70       	andi	r24, 0x0F	; 15
  94:	9a 30       	cpi	r25, 0x0A	; 10
  96:	20 f0       	brcs	.+8      	; 0xa0 <bcd8bin+0x14>
  98:	9a 50       	subi	r25, 0x0A	; 10
  9a:	8f 5f       	subi	r24, 0xFF	; 255
  9c:	9a 30       	cpi	r25, 0x0A	; 10
  9e:	e0 f7       	brcc	.-8      	; 0x98 <bcd8bin+0xc>
  a0:	88 23       	and	r24, r24
  a2:	49 f0       	breq	.+18     	; 0xb6 <bcd8bin+0x2a>
  a4:	28 2f       	mov	r18, r24
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <bcd8bin+0x1a>
  aa:	28 2f       	mov	r18, r24
  ac:	22 0f       	add	r18, r18
  ae:	22 0f       	add	r18, r18
  b0:	82 0f       	add	r24, r18
  b2:	88 0f       	add	r24, r24
  b4:	98 0f       	add	r25, r24
  b6:	89 2f       	mov	r24, r25
  b8:	08 95       	ret

000000ba <bin_to_tm1637_digit>:
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	8a 30       	cpi	r24, 0x0A	; 10
  be:	91 05       	cpc	r25, r1
  c0:	b0 f4       	brcc	.+44     	; 0xee <__stack+0xf>
  c2:	fc 01       	movw	r30, r24
  c4:	eb 5e       	subi	r30, 0xEB	; 235
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
  c8:	09 94       	ijmp
  ca:	86 e0       	ldi	r24, 0x06	; 6
  cc:	08 95       	ret
  ce:	8b e5       	ldi	r24, 0x5B	; 91
  d0:	08 95       	ret
  d2:	8f e4       	ldi	r24, 0x4F	; 79
  d4:	08 95       	ret
  d6:	86 e6       	ldi	r24, 0x66	; 102
  d8:	08 95       	ret
  da:	8d e6       	ldi	r24, 0x6D	; 109
  dc:	08 95       	ret
  de:	8d e7       	ldi	r24, 0x7D	; 125
  e0:	08 95       	ret
  e2:	87 e0       	ldi	r24, 0x07	; 7
  e4:	08 95       	ret
  e6:	8f e7       	ldi	r24, 0x7F	; 127
  e8:	08 95       	ret
  ea:	8f e6       	ldi	r24, 0x6F	; 111
  ec:	08 95       	ret
  ee:	89 e4       	ldi	r24, 0x49	; 73
  f0:	08 95       	ret
  f2:	8f e3       	ldi	r24, 0x3F	; 63
  f4:	08 95       	ret

000000f6 <conv_ds1302_to_tm1637>:
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	18 2f       	mov	r17, r24
  fe:	eb 01       	movw	r28, r22
 100:	8f 70       	andi	r24, 0x0F	; 15
 102:	db df       	rcall	.-74     	; 0xba <bin_to_tm1637_digit>
 104:	88 83       	st	Y, r24
 106:	81 2f       	mov	r24, r17
 108:	82 95       	swap	r24
 10a:	8f 70       	andi	r24, 0x0F	; 15
 10c:	d6 df       	rcall	.-84     	; 0xba <bin_to_tm1637_digit>
 10e:	89 83       	std	Y+1, r24	; 0x01
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	08 95       	ret

00000118 <DS1302_send_start>:
//			 Реализация функций
//========================================================

void DS1302_send_start(void)
{
	PORT_DS1302 |= (1 << DS1302_RST);
 118:	c4 9a       	sbi	0x18, 4	; 24
	__asm__("nop");
 11a:	00 00       	nop
 11c:	08 95       	ret

0000011e <DS1302_send_stop>:
	//_delay_ms(3);
}

void DS1302_send_stop(void)
{
	PORT_DS1302 &= ~( (1 << DS1302_SCLK) | (1 << DS1302_IO) );
 11e:	88 b3       	in	r24, 0x18	; 24
 120:	89 7f       	andi	r24, 0xF9	; 249
 122:	88 bb       	out	0x18, r24	; 24
	__asm__("nop");
 124:	00 00       	nop
	//_delay_ms(3);
	PORT_DS1302 &= ~(1 << DS1302_RST);
 126:	c4 98       	cbi	0x18, 4	; 24
	__asm__("nop");
 128:	00 00       	nop
 12a:	08 95       	ret

0000012c <DS1302_send_byte>:
}

void DS1302_send_byte(uint8_t byte)
{
	// Вывод DAT на выход
	DDR_DS1302 |= 1 << DS1302_IO;
 12c:	ba 9a       	sbi	0x17, 2	; 23
	PORT_DS1302 &= ~(1 << DS1302_IO);
 12e:	c2 98       	cbi	0x18, 2	; 24
 130:	98 e0       	ldi	r25, 0x08	; 8

	// Побитовая отправка байта
	for (uint8_t i = 0; i < 8; i++)
	{
		PORT_DS1302 &= 	~(1 << DS1302_SCLK);
 132:	c1 98       	cbi	0x18, 1	; 24
		uint8_t send_bit = 0;
		send_bit = byte & 1;

		if(send_bit > 0)
 134:	80 ff       	sbrs	r24, 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <DS1302_send_byte+0x10>
			PORT_DS1302 |= 1 << DS1302_IO;
 138:	c2 9a       	sbi	0x18, 2	; 24
 13a:	01 c0       	rjmp	.+2      	; 0x13e <DS1302_send_byte+0x12>
		else
			PORT_DS1302 &= ~(1 << DS1302_IO);
 13c:	c2 98       	cbi	0x18, 2	; 24

		__asm__("nop");
 13e:	00 00       	nop
		//_delay_ms(3);
		
		PORT_DS1302 |= 1 << DS1302_SCLK;
 140:	c1 9a       	sbi	0x18, 1	; 24
		__asm__("nop");
 142:	00 00       	nop
		//_delay_ms(3);

		byte >>= 1;
 144:	86 95       	lsr	r24
 146:	91 50       	subi	r25, 0x01	; 1
	// Вывод DAT на выход
	DDR_DS1302 |= 1 << DS1302_IO;
	PORT_DS1302 &= ~(1 << DS1302_IO);

	// Побитовая отправка байта
	for (uint8_t i = 0; i < 8; i++)
 148:	a1 f7       	brne	.-24     	; 0x132 <DS1302_send_byte+0x6>
		__asm__("nop");
		//_delay_ms(3);

		byte >>= 1;
	}
}
 14a:	08 95       	ret

0000014c <DS1302_transmit_byte>:

 uint8_t DS1302_transmit_byte(void)
{
	// Вывод DAT на вход
	PORT_DS1302 &= ~(1 << DS1302_IO);
 14c:	c2 98       	cbi	0x18, 2	; 24
	DDR_DS1302 &= ~(1 << DS1302_IO);
 14e:	ba 98       	cbi	0x17, 2	; 23
 150:	97 e0       	ldi	r25, 0x07	; 7

	uint8_t byte = 0;
 152:	80 e0       	ldi	r24, 0x00	; 0
	// Побитовый приём байта
	for (uint8_t i = 0; i < 7; i++)
	{
		PORT_DS1302 &= 	~(1 << DS1302_SCLK);
 154:	c1 98       	cbi	0x18, 1	; 24
		
		uint8_t transmit_bit;
		transmit_bit = PIN_DS1302 & (1 << DS1302_IO);
		
		if(transmit_bit > 0)
 156:	b2 9b       	sbis	0x16, 2	; 22
 158:	02 c0       	rjmp	.+4      	; 0x15e <DS1302_transmit_byte+0x12>
			byte |= 0x80;
 15a:	80 68       	ori	r24, 0x80	; 128
 15c:	01 c0       	rjmp	.+2      	; 0x160 <DS1302_transmit_byte+0x14>
		else
			byte &= 0x7f;
 15e:	8f 77       	andi	r24, 0x7F	; 127
		
		__asm__("nop");
 160:	00 00       	nop
		//_delay_ms(3);
		PORT_DS1302 |= 1 << DS1302_SCLK;
 162:	c1 9a       	sbi	0x18, 1	; 24
		__asm__("nop");
 164:	00 00       	nop
		//_delay_ms(3);
		
		byte >>= 1;
 166:	86 95       	lsr	r24
 168:	91 50       	subi	r25, 0x01	; 1
	PORT_DS1302 &= ~(1 << DS1302_IO);
	DDR_DS1302 &= ~(1 << DS1302_IO);

	uint8_t byte = 0;
	// Побитовый приём байта
	for (uint8_t i = 0; i < 7; i++)
 16a:	a1 f7       	brne	.-24     	; 0x154 <DS1302_transmit_byte+0x8>
		
		byte >>= 1;
	}
	
	return byte;
}
 16c:	08 95       	ret

0000016e <DS1302_clock_on>:

void DS1302_clock_on(void)
{
	DS1302_send_start();
 16e:	d4 df       	rcall	.-88     	; 0x118 <DS1302_send_start>
	DS1302_send_byte(0x80);
 170:	80 e8       	ldi	r24, 0x80	; 128
 172:	dc df       	rcall	.-72     	; 0x12c <DS1302_send_byte>
	DS1302_send_byte(0x00);
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	da df       	rcall	.-76     	; 0x12c <DS1302_send_byte>
	DS1302_send_stop();
 178:	d2 df       	rcall	.-92     	; 0x11e <DS1302_send_stop>
 17a:	08 95       	ret

0000017c <DS1302_clock_off>:
}

void DS1302_clock_off(void)
{
	DS1302_send_start();
 17c:	cd df       	rcall	.-102    	; 0x118 <DS1302_send_start>
	DS1302_send_byte(0x80);
 17e:	80 e8       	ldi	r24, 0x80	; 128
 180:	d5 df       	rcall	.-86     	; 0x12c <DS1302_send_byte>
	DS1302_send_byte(0x80);
 182:	80 e8       	ldi	r24, 0x80	; 128
 184:	d3 df       	rcall	.-90     	; 0x12c <DS1302_send_byte>
	DS1302_send_stop();
 186:	cb df       	rcall	.-106    	; 0x11e <DS1302_send_stop>
 188:	08 95       	ret

0000018a <DS1302_set_data_byte>:
{
	DS1302_set_data_byte(0x8C, year);
}

void  DS1302_set_data_byte(uint8_t addr_byte, uint8_t data_byte)
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	d8 2f       	mov	r29, r24
 190:	c6 2f       	mov	r28, r22
	DS1302_send_start();
 192:	c2 df       	rcall	.-124    	; 0x118 <DS1302_send_start>
	DS1302_send_byte(addr_byte);
 194:	8d 2f       	mov	r24, r29
 196:	ca df       	rcall	.-108    	; 0x12c <DS1302_send_byte>
	DS1302_send_byte(data_byte);
 198:	8c 2f       	mov	r24, r28
 19a:	c8 df       	rcall	.-112    	; 0x12c <DS1302_send_byte>
	DS1302_send_stop();
 19c:	c0 df       	rcall	.-128    	; 0x11e <DS1302_send_stop>
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <DS1302_set_hours>:
	DS1302_send_stop();
}

void DS1302_set_hours(uint8_t hours)
{
	DS1302_set_data_byte(0x84, hours);
 1a4:	68 2f       	mov	r22, r24
 1a6:	84 e8       	ldi	r24, 0x84	; 132
 1a8:	f0 df       	rcall	.-32     	; 0x18a <DS1302_set_data_byte>
 1aa:	08 95       	ret

000001ac <DS1302_set_minutes>:
}

void DS1302_set_minutes(uint8_t minutes)
{
	DS1302_set_data_byte(0x82, minutes);
 1ac:	68 2f       	mov	r22, r24
 1ae:	82 e8       	ldi	r24, 0x82	; 130
 1b0:	ec df       	rcall	.-40     	; 0x18a <DS1302_set_data_byte>
 1b2:	08 95       	ret

000001b4 <DS1302_set_day>:
}

void DS1302_set_day(uint8_t day)
{
	DS1302_set_data_byte(0x86, day);
 1b4:	68 2f       	mov	r22, r24
 1b6:	86 e8       	ldi	r24, 0x86	; 134
 1b8:	e8 df       	rcall	.-48     	; 0x18a <DS1302_set_data_byte>
 1ba:	08 95       	ret

000001bc <DS1302_set_month>:
}

void DS1302_set_month(uint8_t month)
{
	DS1302_set_data_byte(0x88, month);
 1bc:	68 2f       	mov	r22, r24
 1be:	88 e8       	ldi	r24, 0x88	; 136
 1c0:	e4 df       	rcall	.-56     	; 0x18a <DS1302_set_data_byte>
 1c2:	08 95       	ret

000001c4 <DS1302_set_year>:
}

void DS1302_set_year(uint8_t year)
{
	DS1302_set_data_byte(0x8C, year);
 1c4:	68 2f       	mov	r22, r24
 1c6:	8c e8       	ldi	r24, 0x8C	; 140
 1c8:	e0 df       	rcall	.-64     	; 0x18a <DS1302_set_data_byte>
 1ca:	08 95       	ret

000001cc <DS1302_get_answer_byte>:
{
	return DS1302_get_answer_byte(0x8d);
}

 uint8_t  DS1302_get_answer_byte(uint8_t addr_query)
{
 1cc:	cf 93       	push	r28
 1ce:	c8 2f       	mov	r28, r24
	uint8_t answer;
	DS1302_send_start();
 1d0:	a3 df       	rcall	.-186    	; 0x118 <DS1302_send_start>
	DS1302_send_byte(addr_query);
 1d2:	8c 2f       	mov	r24, r28
 1d4:	ab df       	rcall	.-170    	; 0x12c <DS1302_send_byte>
	answer = DS1302_transmit_byte();
 1d6:	ba df       	rcall	.-140    	; 0x14c <DS1302_transmit_byte>
 1d8:	c8 2f       	mov	r28, r24
	DS1302_send_stop();
 1da:	a1 df       	rcall	.-190    	; 0x11e <DS1302_send_stop>
	return answer;
 1dc:	8c 2f       	mov	r24, r28
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <DS1302_get_hours>:
	DS1302_send_stop();
}

 uint8_t  DS1302_get_hours(void)
{
	return DS1302_get_answer_byte(0x85);
 1e2:	85 e8       	ldi	r24, 0x85	; 133
 1e4:	f3 df       	rcall	.-26     	; 0x1cc <DS1302_get_answer_byte>
}
 1e6:	08 95       	ret

000001e8 <DS1302_get_minutes>:

 uint8_t  DS1302_get_minutes(void)
{
	return DS1302_get_answer_byte(0x83);
 1e8:	83 e8       	ldi	r24, 0x83	; 131
 1ea:	f0 df       	rcall	.-32     	; 0x1cc <DS1302_get_answer_byte>
}
 1ec:	08 95       	ret

000001ee <DS1302_get_day>:

uint8_t  DS1302_get_day(void)
{
	return DS1302_get_answer_byte(0x87);
 1ee:	87 e8       	ldi	r24, 0x87	; 135
 1f0:	ed df       	rcall	.-38     	; 0x1cc <DS1302_get_answer_byte>
}
 1f2:	08 95       	ret

000001f4 <DS1302_get_month>:

uint8_t  DS1302_get_month(void)
{
	return DS1302_get_answer_byte(0x89);
 1f4:	89 e8       	ldi	r24, 0x89	; 137
 1f6:	ea df       	rcall	.-44     	; 0x1cc <DS1302_get_answer_byte>
}
 1f8:	08 95       	ret

000001fa <DS1302_get_year>:

uint8_t  DS1302_get_year(void)
{
	return DS1302_get_answer_byte(0x8d);
 1fa:	8d e8       	ldi	r24, 0x8D	; 141
 1fc:	e7 df       	rcall	.-50     	; 0x1cc <DS1302_get_answer_byte>
}
 1fe:	08 95       	ret

00000200 <TM1637_send_start>:
//			 Реализация функций
//========================================================

void TM1637_send_start(void)
{
	PORT_TM1367 |= (1 << TM1637_CLK) | (1 << TM1637_DATA);
 200:	88 b3       	in	r24, 0x18	; 24
 202:	89 60       	ori	r24, 0x09	; 9
 204:	88 bb       	out	0x18, r24	; 24
	__asm__("nop");
 206:	00 00       	nop
 208:	08 95       	ret

0000020a <TM1637_send_stop>:
	//_delay_ms(3);
}

void TM1637_send_stop(void)
{
	PORT_TM1367 |= (1 << TM1637_CLK);
 20a:	c0 9a       	sbi	0x18, 0	; 24
	__asm__("nop");
 20c:	00 00       	nop
	//_delay_ms(3);
	PORT_TM1367 |= (1 << TM1637_DATA);
 20e:	c3 9a       	sbi	0x18, 3	; 24
 210:	08 95       	ret

00000212 <TM1637_send_byte>:
}

void TM1637_send_byte(uint8_t byte)
{
	PORT_TM1367 &= ~(1 << TM1637_DATA);
 212:	c3 98       	cbi	0x18, 3	; 24
	//_delay_ms(3);
	PORT_TM1367 &= ~(1 << TM1637_CLK);
 214:	c0 98       	cbi	0x18, 0	; 24
 216:	98 e0       	ldi	r25, 0x08	; 8
	for (uint8_t i = 0; i < 8; i++)
	{
		uint8_t send_bit = 0;
		send_bit = byte & 1;

		if(send_bit > 0)
 218:	80 ff       	sbrs	r24, 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <TM1637_send_byte+0xe>
			PORT_TM1367 |= (1 << TM1637_DATA);
 21c:	c3 9a       	sbi	0x18, 3	; 24
 21e:	01 c0       	rjmp	.+2      	; 0x222 <TM1637_send_byte+0x10>
		else
			PORT_TM1367 &= ~(1 << TM1637_DATA);
 220:	c3 98       	cbi	0x18, 3	; 24
			
		__asm__("nop");
 222:	00 00       	nop
		//_delay_ms(3);
		PORT_TM1367 |= 1 << TM1637_CLK;
 224:	c0 9a       	sbi	0x18, 0	; 24
		__asm__("nop");
 226:	00 00       	nop
		//_delay_ms(3);
		PORT_TM1367 &= ~(1 << TM1637_CLK);
 228:	c0 98       	cbi	0x18, 0	; 24
		
		byte >>= 1;
 22a:	86 95       	lsr	r24
 22c:	91 50       	subi	r25, 0x01	; 1
{
	PORT_TM1367 &= ~(1 << TM1637_DATA);
	//_delay_ms(3);
	PORT_TM1367 &= ~(1 << TM1637_CLK);
	
	for (uint8_t i = 0; i < 8; i++)
 22e:	a1 f7       	brne	.-24     	; 0x218 <TM1637_send_byte+0x6>
		PORT_TM1367 &= ~(1 << TM1637_CLK);
		
		byte >>= 1;
	}
	
	PORT_TM1367 &= ~(1 << TM1637_CLK);
 230:	c0 98       	cbi	0x18, 0	; 24
	PORT_TM1367 &= ~(1 << TM1637_DATA);
 232:	c3 98       	cbi	0x18, 3	; 24
	DDR_TM1367 &= ~(1 << TM1637_DATA);
 234:	bb 98       	cbi	0x17, 3	; 23
	__asm__("nop");
 236:	00 00       	nop
	//_delay_ms(3);
	
	uint8_t transmit_bit = 0;
	transmit_bit = PIN_TM1367 & TM1637_DATA;
 238:	86 b3       	in	r24, 0x16	; 22
	
	while (transmit_bit > 0);
 23a:	83 70       	andi	r24, 0x03	; 3
 23c:	09 f0       	breq	.+2      	; 0x240 <TM1637_send_byte+0x2e>
 23e:	ff cf       	rjmp	.-2      	; 0x23e <TM1637_send_byte+0x2c>
	
	DDR_TM1367 |= (1 << TM1637_DATA);
 240:	bb 9a       	sbi	0x17, 3	; 23
	PORT_TM1367 |= (1  << TM1637_CLK);
 242:	c0 9a       	sbi	0x18, 0	; 24
	__asm__("nop");
 244:	00 00       	nop
	//_delay_ms(3);
	PORT_TM1367 &= ~(1  << TM1637_CLK);
 246:	c0 98       	cbi	0x18, 0	; 24
	__asm__("nop");
 248:	00 00       	nop
 24a:	08 95       	ret

0000024c <TM1637_display>:
	//s_delay_ms(3);
}

void TM1637_display(uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	08 2f       	mov	r16, r24
 256:	16 2f       	mov	r17, r22
 258:	d4 2f       	mov	r29, r20
 25a:	c2 2f       	mov	r28, r18
	TM1637_send_start();
 25c:	d1 df       	rcall	.-94     	; 0x200 <TM1637_send_start>
	TM1637_send_byte(0x40);
 25e:	80 e4       	ldi	r24, 0x40	; 64
 260:	d8 df       	rcall	.-80     	; 0x212 <TM1637_send_byte>
	TM1637_send_stop();
 262:	d3 df       	rcall	.-90     	; 0x20a <TM1637_send_stop>
	
	TM1637_send_start();
 264:	cd df       	rcall	.-102    	; 0x200 <TM1637_send_start>
	TM1637_send_byte(0xC0);
 266:	80 ec       	ldi	r24, 0xC0	; 192
 268:	d4 df       	rcall	.-88     	; 0x212 <TM1637_send_byte>
	TM1637_send_byte(d1);
 26a:	80 2f       	mov	r24, r16
 26c:	d2 df       	rcall	.-92     	; 0x212 <TM1637_send_byte>
	TM1637_send_byte(d2);
 26e:	81 2f       	mov	r24, r17
 270:	d0 df       	rcall	.-96     	; 0x212 <TM1637_send_byte>
	TM1637_send_byte(d3);
 272:	8d 2f       	mov	r24, r29
 274:	ce df       	rcall	.-100    	; 0x212 <TM1637_send_byte>
	TM1637_send_byte(d4);
 276:	8c 2f       	mov	r24, r28
 278:	cc df       	rcall	.-104    	; 0x212 <TM1637_send_byte>
	TM1637_send_stop();
 27a:	c7 df       	rcall	.-114    	; 0x20a <TM1637_send_stop>
	
	TM1637_send_start();
 27c:	c1 df       	rcall	.-126    	; 0x200 <TM1637_send_start>
	TM1637_send_byte(0x8f);
 27e:	8f e8       	ldi	r24, 0x8F	; 143
 280:	c8 df       	rcall	.-112    	; 0x212 <TM1637_send_byte>
	TM1637_send_stop();
 282:	c3 df       	rcall	.-122    	; 0x20a <TM1637_send_stop>
}
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	0f 91       	pop	r16
 28c:	08 95       	ret

0000028e <TM1637_display_dash>:

void TM1637_display_dash(void)
{
	TM1637_display(0b01000000, 0b01000000, 0b01000000, 0b01000000);
 28e:	20 e4       	ldi	r18, 0x40	; 64
 290:	40 e4       	ldi	r20, 0x40	; 64
 292:	60 e4       	ldi	r22, 0x40	; 64
 294:	80 e4       	ldi	r24, 0x40	; 64
 296:	da df       	rcall	.-76     	; 0x24c <TM1637_display>
 298:	08 95       	ret

0000029a <__vector_1>:
#pragma once

ISR(INT0_vect)
{
 29a:	1f 92       	push	r1
 29c:	0f 92       	push	r0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	0f 92       	push	r0
 2a2:	11 24       	eor	r1, r1
 2a4:	2f 93       	push	r18
 2a6:	3f 93       	push	r19
 2a8:	4f 93       	push	r20
 2aa:	5f 93       	push	r21
 2ac:	6f 93       	push	r22
 2ae:	7f 93       	push	r23
 2b0:	8f 93       	push	r24
 2b2:	9f 93       	push	r25
 2b4:	af 93       	push	r26
 2b6:	bf 93       	push	r27
 2b8:	ef 93       	push	r30
 2ba:	ff 93       	push	r31
	clock_mode = 0;
 2bc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <clock_mode>
	DS1302_clock_off();
 2c0:	5d df       	rcall	.-326    	; 0x17c <DS1302_clock_off>

	if(++mode > 5)	
 2c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
 2c8:	86 30       	cpi	r24, 0x06	; 6
 2ca:	18 f4       	brcc	.+6      	; 0x2d2 <__vector_1+0x38>
 2cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 2d0:	05 c0       	rjmp	.+10     	; 0x2dc <__vector_1+0x42>
	{
		mode = 0;
 2d2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		clock_mode = 0;
 2d6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <clock_mode>
		DS1302_clock_on();
 2da:	49 df       	rcall	.-366    	; 0x16e <DS1302_clock_on>
	}
}
 2dc:	ff 91       	pop	r31
 2de:	ef 91       	pop	r30
 2e0:	bf 91       	pop	r27
 2e2:	af 91       	pop	r26
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	7f 91       	pop	r23
 2ea:	6f 91       	pop	r22
 2ec:	5f 91       	pop	r21
 2ee:	4f 91       	pop	r20
 2f0:	3f 91       	pop	r19
 2f2:	2f 91       	pop	r18
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <main>:
#include "tm1637.h"
#include "interrupts.h"

int main(void)
{
	sei();
 2fe:	78 94       	sei
    while (1);
}

inline void MCU_init(void)
{
	DATE.yearH[1] = 0b01011011; //2
 300:	e8 e6       	ldi	r30, 0x68	; 104
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	8b e5       	ldi	r24, 0x5B	; 91
 306:	85 83       	std	Z+5, r24	; 0x05
	DATE.yearH[0] = 0b00111111; //0
 308:	8f e3       	ldi	r24, 0x3F	; 63
 30a:	84 83       	std	Z+4, r24	; 0x04
	
	// Инициализация стека
	SPL = RAMEND;
 30c:	8f ed       	ldi	r24, 0xDF	; 223
 30e:	8d bf       	out	0x3d, r24	; 61
	
	// Инициализация стека
	CLKPR = 0x80;
 310:	80 e8       	ldi	r24, 0x80	; 128
 312:	86 bd       	out	0x26, r24	; 38
	__asm__("nop");
 314:	00 00       	nop
	CLKPR = 0x00;
 316:	16 bc       	out	0x26, r1	; 38
	
	// Выключение компаратора
	ACSR = 0x80;
 318:	88 b9       	out	0x08, r24	; 8
	
	// Инициализация портов ВВ для чипа TM1367
	DDR_TM1367 |= (1 << DDR_TM1367) | (1 << DDR_TM1367);
 31a:	47 b3       	in	r20, 0x17	; 23
 31c:	37 b3       	in	r19, 0x17	; 23
 31e:	27 b3       	in	r18, 0x17	; 23
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	bc 01       	movw	r22, r24
 326:	02 c0       	rjmp	.+4      	; 0x32c <main+0x2e>
 328:	66 0f       	add	r22, r22
 32a:	77 1f       	adc	r23, r23
 32c:	4a 95       	dec	r20
 32e:	e2 f7       	brpl	.-8      	; 0x328 <main+0x2a>
 330:	02 c0       	rjmp	.+4      	; 0x336 <main+0x38>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	3a 95       	dec	r19
 338:	e2 f7       	brpl	.-8      	; 0x332 <main+0x34>
 33a:	86 2b       	or	r24, r22
 33c:	97 2b       	or	r25, r23
 33e:	82 2b       	or	r24, r18
 340:	87 bb       	out	0x17, r24	; 23
	
	// Инициализация портов ВВ для чипа DS1302
	
	DDR_DS1302 |= (1 << DS1302_RST) | (1 << DS1302_SCLK);
 342:	87 b3       	in	r24, 0x17	; 23
 344:	82 61       	ori	r24, 0x12	; 18
 346:	87 bb       	out	0x17, r24	; 23
	PORT_DS1302 |= (0 << DS1302_RST) | (0 << DS1302_SCLK);
 348:	88 b3       	in	r24, 0x18	; 24
 34a:	88 bb       	out	0x18, r24	; 24
	
	// Инициализация портов ВВ для кнопок
	DDR_BUTTON_MODE |= (0 << BUTTON_MODE);
 34c:	81 b3       	in	r24, 0x11	; 17
 34e:	81 bb       	out	0x11, r24	; 17
	PORT_BUTTON_MODE |= (1 << BUTTON_MODE);
 350:	92 9a       	sbi	0x12, 2	; 18

	DDR_BUTTON_SET |= (0 << BUTTON_SET);
 352:	81 b3       	in	r24, 0x11	; 17
 354:	81 bb       	out	0x11, r24	; 17
	PORT_BUTTON_SET |= (1 << BUTTON_SET);
 356:	93 9a       	sbi	0x12, 3	; 18
	
	// Инициализация таймеров
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (0 << CS11) | (1 << CS10); // Выбор режима таймера (СТС, предделитель = 1024)
 358:	8e b5       	in	r24, 0x2e	; 46
 35a:	8d 60       	ori	r24, 0x0D	; 13
 35c:	8e bd       	out	0x2e, r24	; 46
	OCR1A = kdel2;
 35e:	82 e4       	ldi	r24, 0x42	; 66
 360:	9f e0       	ldi	r25, 0x0F	; 15
 362:	9b bd       	out	0x2b, r25	; 43
 364:	8a bd       	out	0x2a, r24	; 42
		
	// Разрешаем прерывание от таймеров
	TIMSK |= (1 << OCIE1A);
 366:	89 b7       	in	r24, 0x39	; 57
 368:	80 64       	ori	r24, 0x40	; 64
 36a:	89 bf       	out	0x39, r24	; 57

	// Разрешаем прерывание INT0 и INT1 по заднему фронту
	MCUCR |= (0 << ISC00) | (1 << ISC01) | (0 << ISC10) | (1 << ISC11);
 36c:	85 b7       	in	r24, 0x35	; 53
 36e:	8a 60       	ori	r24, 0x0A	; 10
 370:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1 << INT0) | (1 << INT1);
 372:	8b b7       	in	r24, 0x3b	; 59
 374:	80 6c       	ori	r24, 0xC0	; 192
 376:	8b bf       	out	0x3b, r24	; 59

int main(void)
{
	sei();
	MCU_init();
	TM1637_display_dash();
 378:	8a df       	rcall	.-236    	; 0x28e <TM1637_display_dash>
 37a:	ff cf       	rjmp	.-2      	; 0x37a <main+0x7c>

0000037c <read_package_data_from_ds1302>:
	GIMSK |= (1 << INT0) | (1 << INT1);
}

void read_package_data_from_ds1302(void)
{
	conv_ds1302_to_tm1637(DS1302_get_minutes(), TIME.minute);
 37c:	35 df       	rcall	.-406    	; 0x1e8 <DS1302_get_minutes>
 37e:	66 e6       	ldi	r22, 0x66	; 102
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	b9 de       	rcall	.-654    	; 0xf6 <conv_ds1302_to_tm1637>
	conv_ds1302_to_tm1637(DS1302_get_hours(), TIME.hour);
 384:	2e df       	rcall	.-420    	; 0x1e2 <DS1302_get_hours>
 386:	64 e6       	ldi	r22, 0x64	; 100
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	b5 de       	rcall	.-662    	; 0xf6 <conv_ds1302_to_tm1637>

	conv_ds1302_to_tm1637(DS1302_get_day(), DATE.day);
 38c:	30 df       	rcall	.-416    	; 0x1ee <DS1302_get_day>
 38e:	68 e6       	ldi	r22, 0x68	; 104
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	b1 de       	rcall	.-670    	; 0xf6 <conv_ds1302_to_tm1637>
	conv_ds1302_to_tm1637(DS1302_get_month(), DATE.month);
 394:	2f df       	rcall	.-418    	; 0x1f4 <DS1302_get_month>
 396:	6a e6       	ldi	r22, 0x6A	; 106
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	ad de       	rcall	.-678    	; 0xf6 <conv_ds1302_to_tm1637>
	
	conv_ds1302_to_tm1637(DS1302_get_year(), DATE.yearL);
 39c:	2e df       	rcall	.-420    	; 0x1fa <DS1302_get_year>
 39e:	6e e6       	ldi	r22, 0x6E	; 110
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	a9 de       	rcall	.-686    	; 0xf6 <conv_ds1302_to_tm1637>
 3a4:	08 95       	ret

000003a6 <display_clock_mode>:
}

void display_clock_mode(void)
{
	if(clock_mode == 0)
 3a6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <clock_mode>
 3aa:	81 11       	cpse	r24, r1
 3ac:	1c c0       	rjmp	.+56     	; 0x3e6 <display_clock_mode+0x40>
	{
		if(double_point == 1)
 3ae:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <double_point>
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	41 f4       	brne	.+16     	; 0x3c6 <display_clock_mode+0x20>
		{
			TIME.minute[0] |= 0x80;
 3b6:	e4 e6       	ldi	r30, 0x64	; 100
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	82 81       	ldd	r24, Z+2	; 0x02
 3bc:	80 68       	ori	r24, 0x80	; 128
 3be:	82 83       	std	Z+2, r24	; 0x02
			double_point = 0;
 3c0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <double_point>
 3c4:	08 c0       	rjmp	.+16     	; 0x3d6 <display_clock_mode+0x30>
		}
		else
		{
			TIME.minute[0] &= ~0x80;
 3c6:	e4 e6       	ldi	r30, 0x64	; 100
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	82 81       	ldd	r24, Z+2	; 0x02
 3cc:	8f 77       	andi	r24, 0x7F	; 127
 3ce:	82 83       	std	Z+2, r24	; 0x02
			double_point = 1;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <double_point>
		}
		TM1637_display(TIME.hour[1], TIME.hour[0], TIME.minute[1], TIME.minute[0]);
 3d6:	e4 e6       	ldi	r30, 0x64	; 100
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	22 81       	ldd	r18, Z+2	; 0x02
 3dc:	43 81       	ldd	r20, Z+3	; 0x03
 3de:	60 81       	ld	r22, Z
 3e0:	81 81       	ldd	r24, Z+1	; 0x01
 3e2:	34 df       	rcall	.-408    	; 0x24c <TM1637_display>
 3e4:	08 95       	ret
	}
	else if(clock_mode == 1)
 3e6:	81 30       	cpi	r24, 0x01	; 1
 3e8:	49 f4       	brne	.+18     	; 0x3fc <display_clock_mode+0x56>
		TM1637_display(DATE.day[1], DATE.day[0] | 0x80, DATE.month[1], DATE.month[0]);
 3ea:	e8 e6       	ldi	r30, 0x68	; 104
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	60 81       	ld	r22, Z
 3f0:	60 68       	ori	r22, 0x80	; 128
 3f2:	22 81       	ldd	r18, Z+2	; 0x02
 3f4:	43 81       	ldd	r20, Z+3	; 0x03
 3f6:	81 81       	ldd	r24, Z+1	; 0x01
 3f8:	29 df       	rcall	.-430    	; 0x24c <TM1637_display>
 3fa:	08 95       	ret
	else if(clock_mode == 2)
 3fc:	82 30       	cpi	r24, 0x02	; 2
 3fe:	39 f4       	brne	.+14     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		TM1637_display(DATE.yearH[1], DATE.yearH[0], DATE.yearL[1], DATE.yearL[0]);
 400:	e8 e6       	ldi	r30, 0x68	; 104
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	26 81       	ldd	r18, Z+6	; 0x06
 406:	47 81       	ldd	r20, Z+7	; 0x07
 408:	64 81       	ldd	r22, Z+4	; 0x04
 40a:	85 81       	ldd	r24, Z+5	; 0x05
 40c:	1f df       	rcall	.-450    	; 0x24c <TM1637_display>
 40e:	08 95       	ret

00000410 <__vector_2>:

ISR(INT1_vect)
{
 410:	1f 92       	push	r1
 412:	0f 92       	push	r0
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	0f 92       	push	r0
 418:	11 24       	eor	r1, r1
 41a:	2f 93       	push	r18
 41c:	3f 93       	push	r19
 41e:	4f 93       	push	r20
 420:	5f 93       	push	r21
 422:	6f 93       	push	r22
 424:	7f 93       	push	r23
 426:	8f 93       	push	r24
 428:	9f 93       	push	r25
 42a:	af 93       	push	r26
 42c:	bf 93       	push	r27
 42e:	ef 93       	push	r30
 430:	ff 93       	push	r31
	if(mode == 0)
 432:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 436:	81 11       	cpse	r24, r1
 438:	0c c0       	rjmp	.+24     	; 0x452 <__vector_2+0x42>
//========================================================
//		Инкремент числа с заданными границами
//========================================================
uint8_t inc_circle(uint8_t digit, uint8_t min, uint8_t max)
{
	uint16_t _digit = (int16_t)digit;
 43a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <clock_mode>
 43e:	90 e0       	ldi	r25, 0x00	; 0
	_digit++;
 440:	01 96       	adiw	r24, 0x01	; 1
	
	if(_digit > max)
 442:	83 30       	cpi	r24, 0x03	; 3
 444:	91 05       	cpc	r25, r1
 446:	10 f0       	brcs	.+4      	; 0x44c <__vector_2+0x3c>
		_digit = min;
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	90 e0       	ldi	r25, 0x00	; 0
	{
		clock_mode = inc_circle(clock_mode, 0, 2);
 44c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <clock_mode>
		display_clock_mode();
 450:	aa df       	rcall	.-172    	; 0x3a6 <display_clock_mode>
	}
	if(mode == 1)
 452:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 456:	81 30       	cpi	r24, 0x01	; 1
 458:	59 f4       	brne	.+22     	; 0x470 <__vector_2+0x60>
	{
		uint8_t buf = bcd8bin(DS1302_get_hours());
 45a:	c3 de       	rcall	.-634    	; 0x1e2 <DS1302_get_hours>
 45c:	17 de       	rcall	.-978    	; 0x8c <bcd8bin>
//========================================================
//		Инкремент числа с заданными границами
//========================================================
uint8_t inc_circle(uint8_t digit, uint8_t min, uint8_t max)
{
	uint16_t _digit = (int16_t)digit;
 45e:	90 e0       	ldi	r25, 0x00	; 0
	_digit++;
 460:	01 96       	adiw	r24, 0x01	; 1
	
	if(_digit > max)
 462:	88 31       	cpi	r24, 0x18	; 24
 464:	91 05       	cpc	r25, r1
 466:	10 f0       	brcs	.+4      	; 0x46c <__vector_2+0x5c>
		_digit = min;
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	90 e0       	ldi	r25, 0x00	; 0
		buf = inc_circle(buf, 0, 23);
		DS1302_set_hours(bin8bcd(buf));
 46c:	f7 dd       	rcall	.-1042   	; 0x5c <bin8bcd>
 46e:	9a de       	rcall	.-716    	; 0x1a4 <DS1302_set_hours>
	}
	if(mode == 2)
 470:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 474:	82 30       	cpi	r24, 0x02	; 2
 476:	59 f4       	brne	.+22     	; 0x48e <__vector_2+0x7e>
	{
		uint8_t buf = bcd8bin(DS1302_get_minutes());
 478:	b7 de       	rcall	.-658    	; 0x1e8 <DS1302_get_minutes>
 47a:	08 de       	rcall	.-1008   	; 0x8c <bcd8bin>
//========================================================
//		Инкремент числа с заданными границами
//========================================================
uint8_t inc_circle(uint8_t digit, uint8_t min, uint8_t max)
{
	uint16_t _digit = (int16_t)digit;
 47c:	90 e0       	ldi	r25, 0x00	; 0
	_digit++;
 47e:	01 96       	adiw	r24, 0x01	; 1
	
	if(_digit > max)
 480:	8c 33       	cpi	r24, 0x3C	; 60
 482:	91 05       	cpc	r25, r1
 484:	10 f0       	brcs	.+4      	; 0x48a <__vector_2+0x7a>
		_digit = min;
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	90 e0       	ldi	r25, 0x00	; 0
		buf = inc_circle(buf, 0, 59);
		DS1302_set_minutes(bin8bcd(buf));
 48a:	e8 dd       	rcall	.-1072   	; 0x5c <bin8bcd>
 48c:	8f de       	rcall	.-738    	; 0x1ac <DS1302_set_minutes>
	}
	if(mode == 3)
 48e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 492:	83 30       	cpi	r24, 0x03	; 3
 494:	59 f4       	brne	.+22     	; 0x4ac <__vector_2+0x9c>
	{
		uint8_t buf = bcd8bin(DS1302_get_day());
 496:	ab de       	rcall	.-682    	; 0x1ee <DS1302_get_day>
 498:	f9 dd       	rcall	.-1038   	; 0x8c <bcd8bin>
//========================================================
//		Инкремент числа с заданными границами
//========================================================
uint8_t inc_circle(uint8_t digit, uint8_t min, uint8_t max)
{
	uint16_t _digit = (int16_t)digit;
 49a:	90 e0       	ldi	r25, 0x00	; 0
	_digit++;
 49c:	01 96       	adiw	r24, 0x01	; 1
	
	if(_digit > max)
 49e:	80 32       	cpi	r24, 0x20	; 32
 4a0:	91 05       	cpc	r25, r1
 4a2:	10 f0       	brcs	.+4      	; 0x4a8 <__vector_2+0x98>
		_digit = min;
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
		buf = inc_circle(buf, 1, 31);
		DS1302_set_day(bin8bcd(buf));
 4a8:	d9 dd       	rcall	.-1102   	; 0x5c <bin8bcd>
 4aa:	84 de       	rcall	.-760    	; 0x1b4 <DS1302_set_day>
	}
	if(mode == 4)
 4ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4b0:	84 30       	cpi	r24, 0x04	; 4
 4b2:	59 f4       	brne	.+22     	; 0x4ca <__vector_2+0xba>
	{
		uint8_t buf = bcd8bin(DS1302_get_month());
 4b4:	9f de       	rcall	.-706    	; 0x1f4 <DS1302_get_month>
 4b6:	ea dd       	rcall	.-1068   	; 0x8c <bcd8bin>
//========================================================
//		Инкремент числа с заданными границами
//========================================================
uint8_t inc_circle(uint8_t digit, uint8_t min, uint8_t max)
{
	uint16_t _digit = (int16_t)digit;
 4b8:	90 e0       	ldi	r25, 0x00	; 0
	_digit++;
 4ba:	01 96       	adiw	r24, 0x01	; 1
	
	if(_digit > max)
 4bc:	8d 30       	cpi	r24, 0x0D	; 13
 4be:	91 05       	cpc	r25, r1
 4c0:	10 f0       	brcs	.+4      	; 0x4c6 <__vector_2+0xb6>
		_digit = min;
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
		buf = inc_circle(buf, 1, 12);
		DS1302_set_month(bin8bcd(buf));
 4c6:	ca dd       	rcall	.-1132   	; 0x5c <bin8bcd>
 4c8:	79 de       	rcall	.-782    	; 0x1bc <DS1302_set_month>
	}
	if(mode == 5)
 4ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4ce:	85 30       	cpi	r24, 0x05	; 5
 4d0:	59 f4       	brne	.+22     	; 0x4e8 <__vector_2+0xd8>
	{
		uint8_t buf = bcd8bin(DS1302_get_year());
 4d2:	93 de       	rcall	.-730    	; 0x1fa <DS1302_get_year>
 4d4:	db dd       	rcall	.-1098   	; 0x8c <bcd8bin>
//========================================================
//		Инкремент числа с заданными границами
//========================================================
uint8_t inc_circle(uint8_t digit, uint8_t min, uint8_t max)
{
	uint16_t _digit = (int16_t)digit;
 4d6:	90 e0       	ldi	r25, 0x00	; 0
	_digit++;
 4d8:	01 96       	adiw	r24, 0x01	; 1
	
	if(_digit > max)
 4da:	80 35       	cpi	r24, 0x50	; 80
 4dc:	91 05       	cpc	r25, r1
 4de:	10 f0       	brcs	.+4      	; 0x4e4 <__vector_2+0xd4>
		_digit = min;
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	90 e0       	ldi	r25, 0x00	; 0
		buf = inc_circle(buf, 0, 79);
		DS1302_set_year(bin8bcd(buf));
 4e4:	bb dd       	rcall	.-1162   	; 0x5c <bin8bcd>
 4e6:	6e de       	rcall	.-804    	; 0x1c4 <DS1302_set_year>
		
	}
	read_package_data_from_ds1302();
 4e8:	49 df       	rcall	.-366    	; 0x37c <read_package_data_from_ds1302>
}
 4ea:	ff 91       	pop	r31
 4ec:	ef 91       	pop	r30
 4ee:	bf 91       	pop	r27
 4f0:	af 91       	pop	r26
 4f2:	9f 91       	pop	r25
 4f4:	8f 91       	pop	r24
 4f6:	7f 91       	pop	r23
 4f8:	6f 91       	pop	r22
 4fa:	5f 91       	pop	r21
 4fc:	4f 91       	pop	r20
 4fe:	3f 91       	pop	r19
 500:	2f 91       	pop	r18
 502:	0f 90       	pop	r0
 504:	0f be       	out	0x3f, r0	; 63
 506:	0f 90       	pop	r0
 508:	1f 90       	pop	r1
 50a:	18 95       	reti

0000050c <display_mode>:
}

void display_mode(uint8_t _1, uint8_t _2, uint8_t _3, uint8_t _4, uint8_t pair_number)
{
 50c:	0f 93       	push	r16
	if(blink == 1)
 50e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <blink>
 512:	91 30       	cpi	r25, 0x01	; 1
 514:	21 f4       	brne	.+8      	; 0x51e <display_mode+0x12>
	{
		TM1637_display(_1, _2, _3, _4);
 516:	9a de       	rcall	.-716    	; 0x24c <TM1637_display>
		blink = 0;
 518:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <blink>
 51c:	14 c0       	rjmp	.+40     	; 0x546 <display_mode+0x3a>
	}
	else
	{
		if(pair_number == 0)
 51e:	01 11       	cpse	r16, r1
 520:	04 c0       	rjmp	.+8      	; 0x52a <display_mode+0x1e>
			TM1637_display(0, 0, _3, _4);
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	92 de       	rcall	.-732    	; 0x24c <TM1637_display>
 528:	0b c0       	rjmp	.+22     	; 0x540 <display_mode+0x34>
		else if(pair_number == 1)
 52a:	01 30       	cpi	r16, 0x01	; 1
 52c:	21 f4       	brne	.+8      	; 0x536 <display_mode+0x2a>
			TM1637_display(_1, _2, 0, 0);
 52e:	20 e0       	ldi	r18, 0x00	; 0
 530:	40 e0       	ldi	r20, 0x00	; 0
 532:	8c de       	rcall	.-744    	; 0x24c <TM1637_display>
 534:	05 c0       	rjmp	.+10     	; 0x540 <display_mode+0x34>
		else
			TM1637_display(0, 0, 0, 0);
 536:	20 e0       	ldi	r18, 0x00	; 0
 538:	40 e0       	ldi	r20, 0x00	; 0
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	86 de       	rcall	.-756    	; 0x24c <TM1637_display>
		
		blink = 1;
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <blink>
	}
 546:	0f 91       	pop	r16
 548:	08 95       	ret

0000054a <__vector_4>:

ISR(TIMER1_COMPA_vect)
{
 54a:	1f 92       	push	r1
 54c:	0f 92       	push	r0
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	0f 92       	push	r0
 552:	11 24       	eor	r1, r1
 554:	0f 93       	push	r16
 556:	2f 93       	push	r18
 558:	3f 93       	push	r19
 55a:	4f 93       	push	r20
 55c:	5f 93       	push	r21
 55e:	6f 93       	push	r22
 560:	7f 93       	push	r23
 562:	8f 93       	push	r24
 564:	9f 93       	push	r25
 566:	af 93       	push	r26
 568:	bf 93       	push	r27
 56a:	ef 93       	push	r30
 56c:	ff 93       	push	r31
	read_package_data_from_ds1302();
 56e:	06 df       	rcall	.-500    	; 0x37c <read_package_data_from_ds1302>
	
	//!!switch - больше памяти
	if(mode == 0)
 570:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 574:	81 11       	cpse	r24, r1
 576:	02 c0       	rjmp	.+4      	; 0x57c <__vector_4+0x32>
		display_clock_mode();
 578:	16 df       	rcall	.-468    	; 0x3a6 <display_clock_mode>
 57a:	3e c0       	rjmp	.+124    	; 0x5f8 <__vector_4+0xae>
	else if(mode == 1)
 57c:	81 30       	cpi	r24, 0x01	; 1
 57e:	59 f4       	brne	.+22     	; 0x596 <__vector_4+0x4c>
	{
		TIME.minute[0] |= 0x80;
 580:	e4 e6       	ldi	r30, 0x64	; 100
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	22 81       	ldd	r18, Z+2	; 0x02
 586:	20 68       	ori	r18, 0x80	; 128
 588:	22 83       	std	Z+2, r18	; 0x02
		display_mode(TIME.hour[1], TIME.hour[0], TIME.minute[1], TIME.minute[0], 0);
 58a:	00 e0       	ldi	r16, 0x00	; 0
 58c:	43 81       	ldd	r20, Z+3	; 0x03
 58e:	60 81       	ld	r22, Z
 590:	81 81       	ldd	r24, Z+1	; 0x01
 592:	bc df       	rcall	.-136    	; 0x50c <display_mode>
 594:	31 c0       	rjmp	.+98     	; 0x5f8 <__vector_4+0xae>
	}
	else if(mode == 2)
 596:	82 30       	cpi	r24, 0x02	; 2
 598:	59 f4       	brne	.+22     	; 0x5b0 <__vector_4+0x66>
	{
		TIME.minute[0] |= 0x80;
 59a:	e4 e6       	ldi	r30, 0x64	; 100
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	22 81       	ldd	r18, Z+2	; 0x02
 5a0:	20 68       	ori	r18, 0x80	; 128
 5a2:	22 83       	std	Z+2, r18	; 0x02
		display_mode(TIME.hour[1], TIME.hour[0], TIME.minute[1], TIME.minute[0], 1);
 5a4:	01 e0       	ldi	r16, 0x01	; 1
 5a6:	43 81       	ldd	r20, Z+3	; 0x03
 5a8:	60 81       	ld	r22, Z
 5aa:	81 81       	ldd	r24, Z+1	; 0x01
 5ac:	af df       	rcall	.-162    	; 0x50c <display_mode>
 5ae:	24 c0       	rjmp	.+72     	; 0x5f8 <__vector_4+0xae>
	}
	else if(mode == 3)
 5b0:	83 30       	cpi	r24, 0x03	; 3
 5b2:	59 f4       	brne	.+22     	; 0x5ca <__vector_4+0x80>
	{
		DATE.day[0] |= 0x80;
 5b4:	e8 e6       	ldi	r30, 0x68	; 104
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	60 81       	ld	r22, Z
 5ba:	60 68       	ori	r22, 0x80	; 128
 5bc:	60 83       	st	Z, r22
		display_mode(DATE.day[1], DATE.day[0], DATE.month[1], DATE.month[0], 0);
 5be:	00 e0       	ldi	r16, 0x00	; 0
 5c0:	22 81       	ldd	r18, Z+2	; 0x02
 5c2:	43 81       	ldd	r20, Z+3	; 0x03
 5c4:	81 81       	ldd	r24, Z+1	; 0x01
 5c6:	a2 df       	rcall	.-188    	; 0x50c <display_mode>
 5c8:	17 c0       	rjmp	.+46     	; 0x5f8 <__vector_4+0xae>
	}
	else if(mode == 4)
 5ca:	84 30       	cpi	r24, 0x04	; 4
 5cc:	59 f4       	brne	.+22     	; 0x5e4 <__vector_4+0x9a>
	{
		DATE.day[0] |= 0x80;
 5ce:	e8 e6       	ldi	r30, 0x68	; 104
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	60 81       	ld	r22, Z
 5d4:	60 68       	ori	r22, 0x80	; 128
 5d6:	60 83       	st	Z, r22
		display_mode(DATE.day[1], DATE.day[0], DATE.month[1], DATE.month[0], 1);
 5d8:	01 e0       	ldi	r16, 0x01	; 1
 5da:	22 81       	ldd	r18, Z+2	; 0x02
 5dc:	43 81       	ldd	r20, Z+3	; 0x03
 5de:	81 81       	ldd	r24, Z+1	; 0x01
 5e0:	95 df       	rcall	.-214    	; 0x50c <display_mode>
 5e2:	0a c0       	rjmp	.+20     	; 0x5f8 <__vector_4+0xae>
	}
	else if(mode == 5)
 5e4:	85 30       	cpi	r24, 0x05	; 5
 5e6:	41 f4       	brne	.+16     	; 0x5f8 <__vector_4+0xae>
		display_mode(DATE.yearH[1], DATE.yearH[0], DATE.yearL[1], DATE.yearL[0], 2);
 5e8:	e8 e6       	ldi	r30, 0x68	; 104
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	02 e0       	ldi	r16, 0x02	; 2
 5ee:	26 81       	ldd	r18, Z+6	; 0x06
 5f0:	47 81       	ldd	r20, Z+7	; 0x07
 5f2:	64 81       	ldd	r22, Z+4	; 0x04
 5f4:	85 81       	ldd	r24, Z+5	; 0x05
 5f6:	8a df       	rcall	.-236    	; 0x50c <display_mode>
}
 5f8:	ff 91       	pop	r31
 5fa:	ef 91       	pop	r30
 5fc:	bf 91       	pop	r27
 5fe:	af 91       	pop	r26
 600:	9f 91       	pop	r25
 602:	8f 91       	pop	r24
 604:	7f 91       	pop	r23
 606:	6f 91       	pop	r22
 608:	5f 91       	pop	r21
 60a:	4f 91       	pop	r20
 60c:	3f 91       	pop	r19
 60e:	2f 91       	pop	r18
 610:	0f 91       	pop	r16
 612:	0f 90       	pop	r0
 614:	0f be       	out	0x3f, r0	; 63
 616:	0f 90       	pop	r0
 618:	1f 90       	pop	r1
 61a:	18 95       	reti

0000061c <_exit>:
 61c:	f8 94       	cli

0000061e <__stop_program>:
 61e:	ff cf       	rjmp	.-2      	; 0x61e <__stop_program>
