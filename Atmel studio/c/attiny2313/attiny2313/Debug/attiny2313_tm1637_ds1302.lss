
attiny2313_tm1637_ds1302.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000006da  0000076e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080006c  0080006c  0000077a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000077a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001758  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000698  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c6a  00000000  00000000  00002724  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  00003390  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066c  00000000  00000000  00003734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000118e  00000000  00000000  00003da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00004f2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1e c0       	rjmp	.+60     	; 0x3e <__ctors_end>
   2:	a6 c2       	rjmp	.+1356   	; 0x550 <__vector_1>
   4:	e2 c2       	rjmp	.+1476   	; 0x5ca <__vector_2>
   6:	34 c0       	rjmp	.+104    	; 0x70 <__bad_interrupt>
   8:	25 c2       	rjmp	.+1098   	; 0x454 <__vector_4>
   a:	32 c0       	rjmp	.+100    	; 0x70 <__bad_interrupt>
   c:	31 c0       	rjmp	.+98     	; 0x70 <__bad_interrupt>
   e:	30 c0       	rjmp	.+96     	; 0x70 <__bad_interrupt>
  10:	2f c0       	rjmp	.+94     	; 0x70 <__bad_interrupt>
  12:	2e c0       	rjmp	.+92     	; 0x70 <__bad_interrupt>
  14:	2d c0       	rjmp	.+90     	; 0x70 <__bad_interrupt>
  16:	2c c0       	rjmp	.+88     	; 0x70 <__bad_interrupt>
  18:	2b c0       	rjmp	.+86     	; 0x70 <__bad_interrupt>
  1a:	2a c0       	rjmp	.+84     	; 0x70 <__bad_interrupt>
  1c:	29 c0       	rjmp	.+82     	; 0x70 <__bad_interrupt>
  1e:	28 c0       	rjmp	.+80     	; 0x70 <__bad_interrupt>
  20:	27 c0       	rjmp	.+78     	; 0x70 <__bad_interrupt>
  22:	26 c0       	rjmp	.+76     	; 0x70 <__bad_interrupt>
  24:	25 c0       	rjmp	.+74     	; 0x70 <__bad_interrupt>
  26:	24 c0       	rjmp	.+72     	; 0x70 <__bad_interrupt>
  28:	23 c0       	rjmp	.+70     	; 0x70 <__bad_interrupt>
  2a:	6e c0       	rjmp	.+220    	; 0x108 <__stack+0x29>
  2c:	59 c0       	rjmp	.+178    	; 0xe0 <__stack+0x1>
  2e:	5a c0       	rjmp	.+180    	; 0xe4 <__stack+0x5>
  30:	5b c0       	rjmp	.+182    	; 0xe8 <__stack+0x9>
  32:	5c c0       	rjmp	.+184    	; 0xec <__stack+0xd>
  34:	5d c0       	rjmp	.+186    	; 0xf0 <__stack+0x11>
  36:	5e c0       	rjmp	.+188    	; 0xf4 <__stack+0x15>
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__stack+0x19>
  3a:	60 c0       	rjmp	.+192    	; 0xfc <__stack+0x1d>
  3c:	61 c0       	rjmp	.+194    	; 0x100 <__stack+0x21>

0000003e <__ctors_end>:
  3e:	11 24       	eor	r1, r1
  40:	1f be       	out	0x3f, r1	; 63
  42:	cf ed       	ldi	r28, 0xDF	; 223
  44:	cd bf       	out	0x3d, r28	; 61

00000046 <__do_copy_data>:
  46:	10 e0       	ldi	r17, 0x00	; 0
  48:	a0 e6       	ldi	r26, 0x60	; 96
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	ea ed       	ldi	r30, 0xDA	; 218
  4e:	f6 e0       	ldi	r31, 0x06	; 6
  50:	02 c0       	rjmp	.+4      	; 0x56 <__do_copy_data+0x10>
  52:	05 90       	lpm	r0, Z+
  54:	0d 92       	st	X+, r0
  56:	ac 36       	cpi	r26, 0x6C	; 108
  58:	b1 07       	cpc	r27, r17
  5a:	d9 f7       	brne	.-10     	; 0x52 <__do_copy_data+0xc>

0000005c <__do_clear_bss>:
  5c:	20 e0       	ldi	r18, 0x00	; 0
  5e:	ac e6       	ldi	r26, 0x6C	; 108
  60:	b0 e0       	ldi	r27, 0x00	; 0
  62:	01 c0       	rjmp	.+2      	; 0x66 <.do_clear_bss_start>

00000064 <.do_clear_bss_loop>:
  64:	1d 92       	st	X+, r1

00000066 <.do_clear_bss_start>:
  66:	ac 37       	cpi	r26, 0x7C	; 124
  68:	b2 07       	cpc	r27, r18
  6a:	e1 f7       	brne	.-8      	; 0x64 <.do_clear_bss_loop>
  6c:	4b d1       	rcall	.+662    	; 0x304 <main>
  6e:	33 c3       	rjmp	.+1638   	; 0x6d6 <_exit>

00000070 <__bad_interrupt>:
  70:	c7 cf       	rjmp	.-114    	; 0x0 <__vectors>

00000072 <bin8bcd>:
//		Пример: 0xab -> 0x0b
//=======================================================
uint8_t half_byteL(uint8_t digit)
{
	return (digit & 0x0f);
  72:	28 2f       	mov	r18, r24
  74:	30 e0       	ldi	r19, 0x00	; 0
  76:	12 16       	cp	r1, r18
  78:	13 06       	cpc	r1, r19
  7a:	4c f4       	brge	.+18     	; 0x8e <bin8bcd+0x1c>
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	2a 50       	subi	r18, 0x0A	; 10
  80:	31 09       	sbc	r19, r1
  82:	0a f0       	brmi	.+2      	; 0x86 <bin8bcd+0x14>
  84:	8f 5f       	subi	r24, 0xFF	; 255
  86:	12 16       	cp	r1, r18
  88:	13 06       	cpc	r1, r19
  8a:	cc f3       	brlt	.-14     	; 0x7e <bin8bcd+0xc>
  8c:	01 c0       	rjmp	.+2      	; 0x90 <bin8bcd+0x1e>
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	33 23       	and	r19, r19
  92:	14 f4       	brge	.+4      	; 0x98 <bin8bcd+0x26>
  94:	26 5f       	subi	r18, 0xF6	; 246
  96:	01 c0       	rjmp	.+2      	; 0x9a <bin8bcd+0x28>
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	82 95       	swap	r24
  9c:	80 7f       	andi	r24, 0xF0	; 240
  9e:	82 2b       	or	r24, r18
  a0:	08 95       	ret

000000a2 <bcd8bin>:
  a2:	98 2f       	mov	r25, r24
  a4:	9f 70       	andi	r25, 0x0F	; 15
  a6:	82 95       	swap	r24
  a8:	8f 70       	andi	r24, 0x0F	; 15
  aa:	9a 30       	cpi	r25, 0x0A	; 10
  ac:	20 f0       	brcs	.+8      	; 0xb6 <bcd8bin+0x14>
  ae:	9a 50       	subi	r25, 0x0A	; 10
  b0:	8f 5f       	subi	r24, 0xFF	; 255
  b2:	9a 30       	cpi	r25, 0x0A	; 10
  b4:	e0 f7       	brcc	.-8      	; 0xae <bcd8bin+0xc>
  b6:	88 23       	and	r24, r24
  b8:	49 f0       	breq	.+18     	; 0xcc <bcd8bin+0x2a>
  ba:	28 2f       	mov	r18, r24
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <bcd8bin+0x1a>
  c0:	28 2f       	mov	r18, r24
  c2:	22 0f       	add	r18, r18
  c4:	22 0f       	add	r18, r18
  c6:	82 0f       	add	r24, r18
  c8:	88 0f       	add	r24, r24
  ca:	98 0f       	add	r25, r24
  cc:	89 2f       	mov	r24, r25
  ce:	08 95       	ret

000000d0 <bin_to_tm1637_digit>:
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	8a 30       	cpi	r24, 0x0A	; 10
  d4:	91 05       	cpc	r25, r1
  d6:	b0 f4       	brcc	.+44     	; 0x104 <__stack+0x25>
  d8:	fc 01       	movw	r30, r24
  da:	eb 5e       	subi	r30, 0xEB	; 235
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	09 94       	ijmp
  e0:	86 e0       	ldi	r24, 0x06	; 6
  e2:	08 95       	ret
  e4:	8b e5       	ldi	r24, 0x5B	; 91
  e6:	08 95       	ret
  e8:	8f e4       	ldi	r24, 0x4F	; 79
  ea:	08 95       	ret
  ec:	86 e6       	ldi	r24, 0x66	; 102
  ee:	08 95       	ret
  f0:	8d e6       	ldi	r24, 0x6D	; 109
  f2:	08 95       	ret
  f4:	8d e7       	ldi	r24, 0x7D	; 125
  f6:	08 95       	ret
  f8:	87 e0       	ldi	r24, 0x07	; 7
  fa:	08 95       	ret
  fc:	8f e7       	ldi	r24, 0x7F	; 127
  fe:	08 95       	ret
 100:	8f e6       	ldi	r24, 0x6F	; 111
 102:	08 95       	ret
 104:	89 e4       	ldi	r24, 0x49	; 73
 106:	08 95       	ret
 108:	8f e3       	ldi	r24, 0x3F	; 63
 10a:	08 95       	ret

0000010c <conv_ds1302_to_tm1637>:
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	18 2f       	mov	r17, r24
 114:	eb 01       	movw	r28, r22
 116:	8f 70       	andi	r24, 0x0F	; 15
 118:	db df       	rcall	.-74     	; 0xd0 <bin_to_tm1637_digit>
 11a:	88 83       	st	Y, r24
 11c:	81 2f       	mov	r24, r17
 11e:	82 95       	swap	r24
 120:	8f 70       	andi	r24, 0x0F	; 15
 122:	d6 df       	rcall	.-84     	; 0xd0 <bin_to_tm1637_digit>
 124:	89 83       	std	Y+1, r24	; 0x01
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	1f 91       	pop	r17
 12c:	08 95       	ret

0000012e <DS1302_send_start>:
//			 Реализация функций
//========================================================

void DS1302_send_start(void)
{
	PORT_DS1302 |= (1 << DS1302_RST);
 12e:	c4 9a       	sbi	0x18, 4	; 24
	__asm__("nop");
 130:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	8d ee       	ldi	r24, 0xED	; 237
 134:	92 e0       	ldi	r25, 0x02	; 2
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <DS1302_send_start+0x8>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <DS1302_send_start+0xe>
 13c:	00 00       	nop
 13e:	08 95       	ret

00000140 <DS1302_send_stop>:
	_delay_ms(3);
}

void DS1302_send_stop(void)
{
	PORT_DS1302 &= ~( (1 << DS1302_SCLK) | (1 << DS1302_IO) );
 140:	88 b3       	in	r24, 0x18	; 24
 142:	89 7f       	andi	r24, 0xF9	; 249
 144:	88 bb       	out	0x18, r24	; 24
	__asm__("nop");
 146:	00 00       	nop
 148:	8d ee       	ldi	r24, 0xED	; 237
 14a:	92 e0       	ldi	r25, 0x02	; 2
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <DS1302_send_stop+0xc>
 150:	00 c0       	rjmp	.+0      	; 0x152 <DS1302_send_stop+0x12>
 152:	00 00       	nop
	_delay_ms(3);
	PORT_DS1302 &= ~(1 << DS1302_RST);
 154:	c4 98       	cbi	0x18, 4	; 24
	__asm__("nop");
 156:	00 00       	nop
 158:	8d ee       	ldi	r24, 0xED	; 237
 15a:	92 e0       	ldi	r25, 0x02	; 2
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <DS1302_send_stop+0x1c>
 160:	00 c0       	rjmp	.+0      	; 0x162 <DS1302_send_stop+0x22>
 162:	00 00       	nop
 164:	08 95       	ret

00000166 <DS1302_send_byte>:
}

void DS1302_send_byte(uint8_t byte)
{
	// Вывод DAT на выход
	DDR_DS1302 |= 1 << DS1302_IO;
 166:	ba 9a       	sbi	0x17, 2	; 23
	PORT_DS1302 &= ~(1 << DS1302_IO);
 168:	c2 98       	cbi	0x18, 2	; 24
 16a:	98 e0       	ldi	r25, 0x08	; 8

	// Побитовая отправка байта
	for (uint8_t i = 0; i < 8; i++)
	{
		PORT_DS1302 &= 	~(1 << DS1302_SCLK);
 16c:	c1 98       	cbi	0x18, 1	; 24
		uint8_t send_bit = 0;
		send_bit = byte & 1;

		if(send_bit > 0)
 16e:	80 ff       	sbrs	r24, 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DS1302_send_byte+0x10>
			PORT_DS1302 |= 1 << DS1302_IO;
 172:	c2 9a       	sbi	0x18, 2	; 24
 174:	01 c0       	rjmp	.+2      	; 0x178 <DS1302_send_byte+0x12>
		else
			PORT_DS1302 &= ~(1 << DS1302_IO);
 176:	c2 98       	cbi	0x18, 2	; 24

		__asm__("nop");
 178:	00 00       	nop
 17a:	ed ee       	ldi	r30, 0xED	; 237
 17c:	f2 e0       	ldi	r31, 0x02	; 2
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <DS1302_send_byte+0x18>
 182:	00 c0       	rjmp	.+0      	; 0x184 <DS1302_send_byte+0x1e>
 184:	00 00       	nop
		_delay_ms(3);
		
		PORT_DS1302 |= 1 << DS1302_SCLK;
 186:	c1 9a       	sbi	0x18, 1	; 24
		__asm__("nop");
 188:	00 00       	nop
 18a:	ed ee       	ldi	r30, 0xED	; 237
 18c:	f2 e0       	ldi	r31, 0x02	; 2
 18e:	31 97       	sbiw	r30, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <DS1302_send_byte+0x28>
 192:	00 c0       	rjmp	.+0      	; 0x194 <DS1302_send_byte+0x2e>
 194:	00 00       	nop
		_delay_ms(3);

		byte >>= 1;
 196:	86 95       	lsr	r24
 198:	91 50       	subi	r25, 0x01	; 1
	// Вывод DAT на выход
	DDR_DS1302 |= 1 << DS1302_IO;
	PORT_DS1302 &= ~(1 << DS1302_IO);

	// Побитовая отправка байта
	for (uint8_t i = 0; i < 8; i++)
 19a:	41 f7       	brne	.-48     	; 0x16c <DS1302_send_byte+0x6>
		__asm__("nop");
		_delay_ms(3);

		byte >>= 1;
	}
}
 19c:	08 95       	ret

0000019e <DS1302_transmit_byte>:

 uint8_t DS1302_transmit_byte(void)
{
	// Вывод DAT на вход
	PORT_DS1302 &= ~(1 << DS1302_IO);
 19e:	c2 98       	cbi	0x18, 2	; 24
	DDR_DS1302 &= ~(1 << DS1302_IO);
 1a0:	ba 98       	cbi	0x17, 2	; 23
 1a2:	97 e0       	ldi	r25, 0x07	; 7

	uint8_t byte = 0;
 1a4:	80 e0       	ldi	r24, 0x00	; 0
	// Побитовый приём байта
	for (uint8_t i = 0; i < 7; i++)
	{
		PORT_DS1302 &= 	~(1 << DS1302_SCLK);
 1a6:	c1 98       	cbi	0x18, 1	; 24
		
		uint8_t transmit_bit;
		transmit_bit = PIN_DS1302 & (1 << DS1302_IO);
		
		if(transmit_bit > 0)
 1a8:	b2 9b       	sbis	0x16, 2	; 22
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DS1302_transmit_byte+0x12>
			byte |= 0x80;
 1ac:	80 68       	ori	r24, 0x80	; 128
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <DS1302_transmit_byte+0x14>
		else
			byte &= 0x7f;
 1b0:	8f 77       	andi	r24, 0x7F	; 127
		
		__asm__("nop");
 1b2:	00 00       	nop
 1b4:	ed ee       	ldi	r30, 0xED	; 237
 1b6:	f2 e0       	ldi	r31, 0x02	; 2
 1b8:	31 97       	sbiw	r30, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <DS1302_transmit_byte+0x1a>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <DS1302_transmit_byte+0x20>
 1be:	00 00       	nop
		_delay_ms(3);
		PORT_DS1302 |= 1 << DS1302_SCLK;
 1c0:	c1 9a       	sbi	0x18, 1	; 24
		__asm__("nop");
 1c2:	00 00       	nop
 1c4:	ed ee       	ldi	r30, 0xED	; 237
 1c6:	f2 e0       	ldi	r31, 0x02	; 2
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <DS1302_transmit_byte+0x2a>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <DS1302_transmit_byte+0x30>
 1ce:	00 00       	nop
		_delay_ms(3);
		
		byte >>= 1;
 1d0:	86 95       	lsr	r24
 1d2:	91 50       	subi	r25, 0x01	; 1
	PORT_DS1302 &= ~(1 << DS1302_IO);
	DDR_DS1302 &= ~(1 << DS1302_IO);

	uint8_t byte = 0;
	// Побитовый приём байта
	for (uint8_t i = 0; i < 7; i++)
 1d4:	41 f7       	brne	.-48     	; 0x1a6 <DS1302_transmit_byte+0x8>
		
		byte >>= 1;
	}
	
	return byte;
}
 1d6:	08 95       	ret

000001d8 <DS1302_clock_on>:

void DS1302_clock_on(void)
{
	DS1302_send_start();
 1d8:	aa df       	rcall	.-172    	; 0x12e <DS1302_send_start>
	DS1302_send_byte(0x80);
 1da:	80 e8       	ldi	r24, 0x80	; 128
 1dc:	c4 df       	rcall	.-120    	; 0x166 <DS1302_send_byte>
	DS1302_send_byte(0x00);
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	c2 df       	rcall	.-124    	; 0x166 <DS1302_send_byte>
	DS1302_send_stop();
 1e2:	ae df       	rcall	.-164    	; 0x140 <DS1302_send_stop>
 1e4:	08 95       	ret

000001e6 <DS1302_clock_off>:
}

void DS1302_clock_off(void)
{
	DS1302_send_start();
 1e6:	a3 df       	rcall	.-186    	; 0x12e <DS1302_send_start>
	DS1302_send_byte(0x80);
 1e8:	80 e8       	ldi	r24, 0x80	; 128
 1ea:	bd df       	rcall	.-134    	; 0x166 <DS1302_send_byte>
	DS1302_send_byte(0x80);
 1ec:	80 e8       	ldi	r24, 0x80	; 128
 1ee:	bb df       	rcall	.-138    	; 0x166 <DS1302_send_byte>
	DS1302_send_stop();
 1f0:	a7 df       	rcall	.-178    	; 0x140 <DS1302_send_stop>
 1f2:	08 95       	ret

000001f4 <DS1302_set_data_byte>:
{
	DS1302_set_data_byte(0x8C, year);
}

void  DS1302_set_data_byte(uint8_t addr_byte, uint8_t data_byte)
{
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	d8 2f       	mov	r29, r24
 1fa:	c6 2f       	mov	r28, r22
	DS1302_send_start();
 1fc:	98 df       	rcall	.-208    	; 0x12e <DS1302_send_start>
	DS1302_send_byte(addr_byte);
 1fe:	8d 2f       	mov	r24, r29
 200:	b2 df       	rcall	.-156    	; 0x166 <DS1302_send_byte>
	DS1302_send_byte(data_byte);
 202:	8c 2f       	mov	r24, r28
 204:	b0 df       	rcall	.-160    	; 0x166 <DS1302_send_byte>
	DS1302_send_stop();
 206:	9c df       	rcall	.-200    	; 0x140 <DS1302_send_stop>
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <DS1302_set_hours>:
	DS1302_send_stop();
}

void DS1302_set_hours(uint8_t hours)
{
	DS1302_set_data_byte(0x84, hours);
 20e:	68 2f       	mov	r22, r24
 210:	84 e8       	ldi	r24, 0x84	; 132
 212:	f0 df       	rcall	.-32     	; 0x1f4 <DS1302_set_data_byte>
 214:	08 95       	ret

00000216 <DS1302_set_minutes>:
}

void DS1302_set_minutes(uint8_t minutes)
{
	DS1302_set_data_byte(0x82, minutes);
 216:	68 2f       	mov	r22, r24
 218:	82 e8       	ldi	r24, 0x82	; 130
 21a:	ec df       	rcall	.-40     	; 0x1f4 <DS1302_set_data_byte>
 21c:	08 95       	ret

0000021e <DS1302_set_day>:
}

void DS1302_set_day(uint8_t day)
{
	DS1302_set_data_byte(0x86, day);
 21e:	68 2f       	mov	r22, r24
 220:	86 e8       	ldi	r24, 0x86	; 134
 222:	e8 df       	rcall	.-48     	; 0x1f4 <DS1302_set_data_byte>
 224:	08 95       	ret

00000226 <DS1302_set_month>:
}

void DS1302_set_month(uint8_t month)
{
	DS1302_set_data_byte(0x88, month);
 226:	68 2f       	mov	r22, r24
 228:	88 e8       	ldi	r24, 0x88	; 136
 22a:	e4 df       	rcall	.-56     	; 0x1f4 <DS1302_set_data_byte>
 22c:	08 95       	ret

0000022e <DS1302_set_year>:
}

void DS1302_set_year(uint8_t year)
{
	DS1302_set_data_byte(0x8C, year);
 22e:	68 2f       	mov	r22, r24
 230:	8c e8       	ldi	r24, 0x8C	; 140
 232:	e0 df       	rcall	.-64     	; 0x1f4 <DS1302_set_data_byte>
 234:	08 95       	ret

00000236 <DS1302_get_answer_byte>:
{
	return DS1302_get_answer_byte(0x8d);
}

 uint8_t  DS1302_get_answer_byte(uint8_t addr_query)
{
 236:	cf 93       	push	r28
 238:	c8 2f       	mov	r28, r24
	uint8_t answer;
	DS1302_send_start();
 23a:	79 df       	rcall	.-270    	; 0x12e <DS1302_send_start>
	DS1302_send_byte(addr_query);
 23c:	8c 2f       	mov	r24, r28
 23e:	93 df       	rcall	.-218    	; 0x166 <DS1302_send_byte>
	answer = DS1302_transmit_byte();
 240:	ae df       	rcall	.-164    	; 0x19e <DS1302_transmit_byte>
 242:	c8 2f       	mov	r28, r24
	DS1302_send_stop();
 244:	7d df       	rcall	.-262    	; 0x140 <DS1302_send_stop>
	return answer;
 246:	8c 2f       	mov	r24, r28
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <DS1302_get_hours>:
	DS1302_send_stop();
}

 uint8_t  DS1302_get_hours(void)
{
	return DS1302_get_answer_byte(0x85);
 24c:	85 e8       	ldi	r24, 0x85	; 133
 24e:	f3 df       	rcall	.-26     	; 0x236 <DS1302_get_answer_byte>
}
 250:	08 95       	ret

00000252 <DS1302_get_minutes>:

 uint8_t  DS1302_get_minutes(void)
{
	return DS1302_get_answer_byte(0x83);
 252:	83 e8       	ldi	r24, 0x83	; 131
 254:	f0 df       	rcall	.-32     	; 0x236 <DS1302_get_answer_byte>
}
 256:	08 95       	ret

00000258 <DS1302_get_day>:

uint8_t  DS1302_get_day(void)
{
	return DS1302_get_answer_byte(0x87);
 258:	87 e8       	ldi	r24, 0x87	; 135
 25a:	ed df       	rcall	.-38     	; 0x236 <DS1302_get_answer_byte>
}
 25c:	08 95       	ret

0000025e <DS1302_get_month>:

uint8_t  DS1302_get_month(void)
{
	return DS1302_get_answer_byte(0x89);
 25e:	89 e8       	ldi	r24, 0x89	; 137
 260:	ea df       	rcall	.-44     	; 0x236 <DS1302_get_answer_byte>
}
 262:	08 95       	ret

00000264 <DS1302_get_year>:

uint8_t  DS1302_get_year(void)
{
	return DS1302_get_answer_byte(0x8d);
 264:	8d e8       	ldi	r24, 0x8D	; 141
 266:	e7 df       	rcall	.-50     	; 0x236 <DS1302_get_answer_byte>
}
 268:	08 95       	ret

0000026a <TM1637_send_start>:
//			 Реализация функций
//========================================================

void TM1637_send_start(void)
{
	PORT_TM1367 |= (1 << TM1637_CLK) | (1 << TM1637_DATA);
 26a:	88 b3       	in	r24, 0x18	; 24
 26c:	89 60       	ori	r24, 0x09	; 9
 26e:	88 bb       	out	0x18, r24	; 24
	__asm__("nop");
 270:	00 00       	nop
 272:	08 95       	ret

00000274 <TM1637_send_stop>:
	//_delay_ms(3);
}

void TM1637_send_stop(void)
{
	PORT_TM1367 |= (1 << TM1637_CLK);
 274:	c0 9a       	sbi	0x18, 0	; 24
	__asm__("nop");
 276:	00 00       	nop
	//_delay_ms(3);
	PORT_TM1367 |= (1 << TM1637_DATA);
 278:	c3 9a       	sbi	0x18, 3	; 24
 27a:	08 95       	ret

0000027c <TM1637_send_byte>:
}

void TM1637_send_byte(uint8_t byte)
{
	PORT_TM1367 &= ~(1 << TM1637_DATA);
 27c:	c3 98       	cbi	0x18, 3	; 24
	//_delay_ms(3);
	PORT_TM1367 &= ~(1 << TM1637_CLK);
 27e:	c0 98       	cbi	0x18, 0	; 24
 280:	98 e0       	ldi	r25, 0x08	; 8
	for (uint8_t i = 0; i < 8; i++)
	{
		uint8_t send_bit = 0;
		send_bit = byte & 1;

		if(send_bit > 0)
 282:	80 ff       	sbrs	r24, 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <TM1637_send_byte+0xe>
			PORT_TM1367 |= (1 << TM1637_DATA);
 286:	c3 9a       	sbi	0x18, 3	; 24
 288:	01 c0       	rjmp	.+2      	; 0x28c <TM1637_send_byte+0x10>
		else
			PORT_TM1367 &= ~(1 << TM1637_DATA);
 28a:	c3 98       	cbi	0x18, 3	; 24
			
		__asm__("nop");
 28c:	00 00       	nop
		//_delay_ms(3);
		PORT_TM1367 |= 1 << TM1637_CLK;
 28e:	c0 9a       	sbi	0x18, 0	; 24
		__asm__("nop");
 290:	00 00       	nop
		//_delay_ms(3);
		PORT_TM1367 &= ~(1 << TM1637_CLK);
 292:	c0 98       	cbi	0x18, 0	; 24
		
		byte >>= 1;
 294:	86 95       	lsr	r24
 296:	91 50       	subi	r25, 0x01	; 1
{
	PORT_TM1367 &= ~(1 << TM1637_DATA);
	//_delay_ms(3);
	PORT_TM1367 &= ~(1 << TM1637_CLK);
	
	for (uint8_t i = 0; i < 8; i++)
 298:	a1 f7       	brne	.-24     	; 0x282 <TM1637_send_byte+0x6>
		PORT_TM1367 &= ~(1 << TM1637_CLK);
		
		byte >>= 1;
	}
	
	PORT_TM1367 &= ~(1 << TM1637_CLK);
 29a:	c0 98       	cbi	0x18, 0	; 24
	PORT_TM1367 &= ~(1 << TM1637_DATA);
 29c:	c3 98       	cbi	0x18, 3	; 24
	DDR_TM1367 &= ~(1 << TM1637_DATA);
 29e:	bb 98       	cbi	0x17, 3	; 23
	__asm__("nop");
 2a0:	00 00       	nop
	//_delay_ms(3);
	
	uint8_t transmit_bit = 0;
	transmit_bit = PIN_TM1367 & TM1637_DATA;
 2a2:	86 b3       	in	r24, 0x16	; 22
	
	while (transmit_bit > 0);
 2a4:	83 70       	andi	r24, 0x03	; 3
 2a6:	09 f0       	breq	.+2      	; 0x2aa <TM1637_send_byte+0x2e>
 2a8:	ff cf       	rjmp	.-2      	; 0x2a8 <TM1637_send_byte+0x2c>
	
	DDR_TM1367 |= (1 << TM1637_DATA);
 2aa:	bb 9a       	sbi	0x17, 3	; 23
	PORT_TM1367 |= (1  << TM1637_CLK);
 2ac:	c0 9a       	sbi	0x18, 0	; 24
	__asm__("nop");
 2ae:	00 00       	nop
	//_delay_ms(3);
	PORT_TM1367 &= ~(1  << TM1637_CLK);
 2b0:	c0 98       	cbi	0x18, 0	; 24
	__asm__("nop");
 2b2:	00 00       	nop
 2b4:	08 95       	ret

000002b6 <TM1637_display>:
	//s_delay_ms(3);
}

void TM1637_display(uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	08 2f       	mov	r16, r24
 2c0:	16 2f       	mov	r17, r22
 2c2:	d4 2f       	mov	r29, r20
 2c4:	c2 2f       	mov	r28, r18
	TM1637_send_start();
 2c6:	d1 df       	rcall	.-94     	; 0x26a <TM1637_send_start>
	TM1637_send_byte(0x40);
 2c8:	80 e4       	ldi	r24, 0x40	; 64
 2ca:	d8 df       	rcall	.-80     	; 0x27c <TM1637_send_byte>
	TM1637_send_stop();
 2cc:	d3 df       	rcall	.-90     	; 0x274 <TM1637_send_stop>
	
	TM1637_send_start();
 2ce:	cd df       	rcall	.-102    	; 0x26a <TM1637_send_start>
	TM1637_send_byte(0xC0);
 2d0:	80 ec       	ldi	r24, 0xC0	; 192
 2d2:	d4 df       	rcall	.-88     	; 0x27c <TM1637_send_byte>
	TM1637_send_byte(d1);
 2d4:	80 2f       	mov	r24, r16
 2d6:	d2 df       	rcall	.-92     	; 0x27c <TM1637_send_byte>
	TM1637_send_byte(d2);
 2d8:	81 2f       	mov	r24, r17
 2da:	d0 df       	rcall	.-96     	; 0x27c <TM1637_send_byte>
	TM1637_send_byte(d3);
 2dc:	8d 2f       	mov	r24, r29
 2de:	ce df       	rcall	.-100    	; 0x27c <TM1637_send_byte>
	TM1637_send_byte(d4);
 2e0:	8c 2f       	mov	r24, r28
 2e2:	cc df       	rcall	.-104    	; 0x27c <TM1637_send_byte>
	TM1637_send_stop();
 2e4:	c7 df       	rcall	.-114    	; 0x274 <TM1637_send_stop>
	
	TM1637_send_start();
 2e6:	c1 df       	rcall	.-126    	; 0x26a <TM1637_send_start>
	TM1637_send_byte(0x8f);
 2e8:	8f e8       	ldi	r24, 0x8F	; 143
 2ea:	c8 df       	rcall	.-112    	; 0x27c <TM1637_send_byte>
	TM1637_send_stop();
 2ec:	c3 df       	rcall	.-122    	; 0x274 <TM1637_send_stop>
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	08 95       	ret

000002f8 <TM1637_display_dash>:

void TM1637_display_dash(void)
{
	TM1637_display(0b01000000, 0b01000000, 0b01000000, 0b01000000);
 2f8:	20 e4       	ldi	r18, 0x40	; 64
 2fa:	40 e4       	ldi	r20, 0x40	; 64
 2fc:	60 e4       	ldi	r22, 0x40	; 64
 2fe:	80 e4       	ldi	r24, 0x40	; 64
 300:	da df       	rcall	.-76     	; 0x2b6 <TM1637_display>
 302:	08 95       	ret

00000304 <main>:
#include "tm1637.h"
#include "interrupts.h"

int main(void)
{
	sei();
 304:	78 94       	sei
    while (1);
}

inline void MCU_init(void)
{
	DATE.yearH[1] = 0b01011011; //2
 306:	e4 e7       	ldi	r30, 0x74	; 116
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	8b e5       	ldi	r24, 0x5B	; 91
 30c:	85 83       	std	Z+5, r24	; 0x05
	DATE.yearH[0] = 0b00111111; //0
 30e:	8f e3       	ldi	r24, 0x3F	; 63
 310:	84 83       	std	Z+4, r24	; 0x04
	
	// Инициализация стека
	SPL = RAMEND;
 312:	8f ed       	ldi	r24, 0xDF	; 223
 314:	8d bf       	out	0x3d, r24	; 61
	
	// Инициализация стека
	CLKPR = 0x80;
 316:	80 e8       	ldi	r24, 0x80	; 128
 318:	86 bd       	out	0x26, r24	; 38
	__asm__("nop");
 31a:	00 00       	nop
	CLKPR = 0x00;
 31c:	16 bc       	out	0x26, r1	; 38
	
	// Выключение компаратора
	ACSR = 0x80;
 31e:	88 b9       	out	0x08, r24	; 8
	
	// Инициализация портов ВВ для чипа TM1367
	DDR_TM1367 |= (1 << DDR_TM1367) | (1 << DDR_TM1367);
 320:	47 b3       	in	r20, 0x17	; 23
 322:	37 b3       	in	r19, 0x17	; 23
 324:	27 b3       	in	r18, 0x17	; 23
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	bc 01       	movw	r22, r24
 32c:	02 c0       	rjmp	.+4      	; 0x332 <main+0x2e>
 32e:	66 0f       	add	r22, r22
 330:	77 1f       	adc	r23, r23
 332:	4a 95       	dec	r20
 334:	e2 f7       	brpl	.-8      	; 0x32e <main+0x2a>
 336:	02 c0       	rjmp	.+4      	; 0x33c <main+0x38>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	3a 95       	dec	r19
 33e:	e2 f7       	brpl	.-8      	; 0x338 <main+0x34>
 340:	86 2b       	or	r24, r22
 342:	97 2b       	or	r25, r23
 344:	82 2b       	or	r24, r18
 346:	87 bb       	out	0x17, r24	; 23
	
	// Инициализация портов ВВ для чипа DS1302
	
	DDR_DS1302 |= (1 << DS1302_RST) | (1 << DS1302_SCLK);
 348:	87 b3       	in	r24, 0x17	; 23
 34a:	82 61       	ori	r24, 0x12	; 18
 34c:	87 bb       	out	0x17, r24	; 23
	PORT_DS1302 |= (0 << DS1302_RST) | (0 << DS1302_SCLK);
 34e:	88 b3       	in	r24, 0x18	; 24
 350:	88 bb       	out	0x18, r24	; 24
	
	// Инициализация портов ВВ для кнопок
	DDR_BUTTON_MODE |= (0 << BUTTON_MODE);
 352:	81 b3       	in	r24, 0x11	; 17
 354:	81 bb       	out	0x11, r24	; 17
	PORT_BUTTON_MODE |= (1 << BUTTON_MODE);
 356:	92 9a       	sbi	0x12, 2	; 18

	DDR_BUTTON_SET |= (0 << BUTTON_SET);
 358:	81 b3       	in	r24, 0x11	; 17
 35a:	81 bb       	out	0x11, r24	; 17
	PORT_BUTTON_SET |= (1 << BUTTON_SET);
 35c:	93 9a       	sbi	0x12, 3	; 18
	
	// Инициализация таймеров
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (0 << CS11) | (1 << CS10); // Выбор режима таймера (СТС, предделитель = 1024)
 35e:	8e b5       	in	r24, 0x2e	; 46
 360:	8d 60       	ori	r24, 0x0D	; 13
 362:	8e bd       	out	0x2e, r24	; 46
	OCR1A = kdel0;
 364:	82 e4       	ldi	r24, 0x42	; 66
 366:	9f e0       	ldi	r25, 0x0F	; 15
 368:	9b bd       	out	0x2b, r25	; 43
 36a:	8a bd       	out	0x2a, r24	; 42
		
	// Разрешаем прерывание от таймеров
	TIMSK |= (1 << OCIE1A);
 36c:	89 b7       	in	r24, 0x39	; 57
 36e:	80 64       	ori	r24, 0x40	; 64
 370:	89 bf       	out	0x39, r24	; 57

	// Разрешаем прерывание INT0 и INT1 по заднему фронту
	MCUCR |= (0 << ISC00) | (1 << ISC01) | (0 << ISC10) | (1 << ISC11);
 372:	85 b7       	in	r24, 0x35	; 53
 374:	8a 60       	ori	r24, 0x0A	; 10
 376:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1 << INT0) | (1 << INT1);
 378:	8b b7       	in	r24, 0x3b	; 59
 37a:	80 6c       	ori	r24, 0xC0	; 192
 37c:	8b bf       	out	0x3b, r24	; 59

int main(void)
{
	sei();
	MCU_init();
	TM1637_display_dash();
 37e:	bc df       	rcall	.-136    	; 0x2f8 <TM1637_display_dash>
 380:	ff cf       	rjmp	.-2      	; 0x380 <main+0x7c>

00000382 <read_package_data_from_ds1302>:
	GIMSK |= (1 << INT0) | (1 << INT1);
}

void read_package_data_from_ds1302(void)
{
	conv_ds1302_to_tm1637(DS1302_get_minutes(), TIME.minute);
 382:	67 df       	rcall	.-306    	; 0x252 <DS1302_get_minutes>
 384:	62 e7       	ldi	r22, 0x72	; 114
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	c1 de       	rcall	.-638    	; 0x10c <conv_ds1302_to_tm1637>
	conv_ds1302_to_tm1637(DS1302_get_hours(), TIME.hour);
 38a:	60 df       	rcall	.-320    	; 0x24c <DS1302_get_hours>
 38c:	60 e7       	ldi	r22, 0x70	; 112
 38e:	70 e0       	ldi	r23, 0x00	; 0
 390:	bd de       	rcall	.-646    	; 0x10c <conv_ds1302_to_tm1637>

	conv_ds1302_to_tm1637(DS1302_get_day(), DATE.day);
 392:	62 df       	rcall	.-316    	; 0x258 <DS1302_get_day>
 394:	64 e7       	ldi	r22, 0x74	; 116
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	b9 de       	rcall	.-654    	; 0x10c <conv_ds1302_to_tm1637>
	conv_ds1302_to_tm1637(DS1302_get_month(), DATE.month);
 39a:	61 df       	rcall	.-318    	; 0x25e <DS1302_get_month>
 39c:	66 e7       	ldi	r22, 0x76	; 118
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	b5 de       	rcall	.-662    	; 0x10c <conv_ds1302_to_tm1637>
	
	conv_ds1302_to_tm1637(DS1302_get_year(), DATE.yearL);
 3a2:	60 df       	rcall	.-320    	; 0x264 <DS1302_get_year>
 3a4:	6a e7       	ldi	r22, 0x7A	; 122
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	b1 de       	rcall	.-670    	; 0x10c <conv_ds1302_to_tm1637>
 3aa:	08 95       	ret

000003ac <display_clock_mode>:
}

void display_clock_mode(void)
{
	if(clock_mode == 0)
 3ac:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <clock_mode>
 3b0:	81 11       	cpse	r24, r1
 3b2:	1c c0       	rjmp	.+56     	; 0x3ec <display_clock_mode+0x40>
	{
		if(double_point == 1)
 3b4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <double_point>
 3b8:	81 30       	cpi	r24, 0x01	; 1
 3ba:	41 f4       	brne	.+16     	; 0x3cc <display_clock_mode+0x20>
		{
			TIME.minute[0] |= 0x80;
 3bc:	e0 e7       	ldi	r30, 0x70	; 112
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	82 81       	ldd	r24, Z+2	; 0x02
 3c2:	80 68       	ori	r24, 0x80	; 128
 3c4:	82 83       	std	Z+2, r24	; 0x02
			double_point = 0;
 3c6:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <double_point>
 3ca:	08 c0       	rjmp	.+16     	; 0x3dc <display_clock_mode+0x30>
		}
		else
		{
			TIME.minute[0] &= ~0x80;
 3cc:	e0 e7       	ldi	r30, 0x70	; 112
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	82 81       	ldd	r24, Z+2	; 0x02
 3d2:	8f 77       	andi	r24, 0x7F	; 127
 3d4:	82 83       	std	Z+2, r24	; 0x02
			double_point = 1;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <double_point>
		}
		TM1637_display(TIME.hour[1], TIME.hour[0], TIME.minute[1], TIME.minute[0]);
 3dc:	e0 e7       	ldi	r30, 0x70	; 112
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	22 81       	ldd	r18, Z+2	; 0x02
 3e2:	43 81       	ldd	r20, Z+3	; 0x03
 3e4:	60 81       	ld	r22, Z
 3e6:	81 81       	ldd	r24, Z+1	; 0x01
 3e8:	66 df       	rcall	.-308    	; 0x2b6 <TM1637_display>
 3ea:	08 95       	ret
	}
	else if(clock_mode == 1)
 3ec:	81 30       	cpi	r24, 0x01	; 1
 3ee:	49 f4       	brne	.+18     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		TM1637_display(DATE.day[1], DATE.day[0] | 0x80, DATE.month[1], DATE.month[0]);
 3f0:	e4 e7       	ldi	r30, 0x74	; 116
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	60 81       	ld	r22, Z
 3f6:	60 68       	ori	r22, 0x80	; 128
 3f8:	22 81       	ldd	r18, Z+2	; 0x02
 3fa:	43 81       	ldd	r20, Z+3	; 0x03
 3fc:	81 81       	ldd	r24, Z+1	; 0x01
 3fe:	5b df       	rcall	.-330    	; 0x2b6 <TM1637_display>
 400:	08 95       	ret
	else if(clock_mode == 2)
 402:	82 30       	cpi	r24, 0x02	; 2
 404:	39 f4       	brne	.+14     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		TM1637_display(DATE.yearH[1], DATE.yearH[0], DATE.yearL[1], DATE.yearL[0]);
 406:	e4 e7       	ldi	r30, 0x74	; 116
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	26 81       	ldd	r18, Z+6	; 0x06
 40c:	47 81       	ldd	r20, Z+7	; 0x07
 40e:	64 81       	ldd	r22, Z+4	; 0x04
 410:	85 81       	ldd	r24, Z+5	; 0x05
 412:	51 df       	rcall	.-350    	; 0x2b6 <TM1637_display>
 414:	08 95       	ret

00000416 <display_mode>:
}

void display_mode(uint8_t _1, uint8_t _2, uint8_t _3, uint8_t _4, uint8_t pair_number)
{
 416:	0f 93       	push	r16
	if(blink == 1)
 418:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <blink>
 41c:	91 30       	cpi	r25, 0x01	; 1
 41e:	21 f4       	brne	.+8      	; 0x428 <display_mode+0x12>
	{
		TM1637_display(_1, _2, _3, _4);
 420:	4a df       	rcall	.-364    	; 0x2b6 <TM1637_display>
		blink = 0;
 422:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <blink>
 426:	14 c0       	rjmp	.+40     	; 0x450 <display_mode+0x3a>
	}
	else
	{
		if(pair_number == 0)
 428:	01 11       	cpse	r16, r1
 42a:	04 c0       	rjmp	.+8      	; 0x434 <display_mode+0x1e>
			TM1637_display(0, 0, _3, _4);
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	42 df       	rcall	.-380    	; 0x2b6 <TM1637_display>
 432:	0b c0       	rjmp	.+22     	; 0x44a <display_mode+0x34>
		else if(pair_number == 1)
 434:	01 30       	cpi	r16, 0x01	; 1
 436:	21 f4       	brne	.+8      	; 0x440 <display_mode+0x2a>
			TM1637_display(_1, _2, 0, 0);
 438:	20 e0       	ldi	r18, 0x00	; 0
 43a:	40 e0       	ldi	r20, 0x00	; 0
 43c:	3c df       	rcall	.-392    	; 0x2b6 <TM1637_display>
 43e:	05 c0       	rjmp	.+10     	; 0x44a <display_mode+0x34>
		else
			TM1637_display(0, 0, 0, 0);
 440:	20 e0       	ldi	r18, 0x00	; 0
 442:	40 e0       	ldi	r20, 0x00	; 0
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	36 df       	rcall	.-404    	; 0x2b6 <TM1637_display>
		
		blink = 1;
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <blink>
	}
}
 450:	0f 91       	pop	r16
 452:	08 95       	ret

00000454 <__vector_4>:
	}
	read_package_data_from_ds1302();
}

ISR(TIMER1_COMPA_vect)
{
 454:	1f 92       	push	r1
 456:	0f 92       	push	r0
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	0f 92       	push	r0
 45c:	11 24       	eor	r1, r1
 45e:	0f 93       	push	r16
 460:	2f 93       	push	r18
 462:	3f 93       	push	r19
 464:	4f 93       	push	r20
 466:	5f 93       	push	r21
 468:	6f 93       	push	r22
 46a:	7f 93       	push	r23
 46c:	8f 93       	push	r24
 46e:	9f 93       	push	r25
 470:	af 93       	push	r26
 472:	bf 93       	push	r27
 474:	ef 93       	push	r30
 476:	ff 93       	push	r31
	read_package_data_from_ds1302();
 478:	84 df       	rcall	.-248    	; 0x382 <read_package_data_from_ds1302>
	
	//!!switch - больше памяти
	if(mode == 0)
 47a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 47e:	81 11       	cpse	r24, r1
 480:	02 c0       	rjmp	.+4      	; 0x486 <__vector_4+0x32>
		display_clock_mode();
 482:	94 df       	rcall	.-216    	; 0x3ac <display_clock_mode>
 484:	3e c0       	rjmp	.+124    	; 0x502 <__vector_4+0xae>
	else if(mode == 1)
 486:	81 30       	cpi	r24, 0x01	; 1
 488:	59 f4       	brne	.+22     	; 0x4a0 <__vector_4+0x4c>
	{
		TIME.minute[0] |= 0x80;
 48a:	e0 e7       	ldi	r30, 0x70	; 112
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	22 81       	ldd	r18, Z+2	; 0x02
 490:	20 68       	ori	r18, 0x80	; 128
 492:	22 83       	std	Z+2, r18	; 0x02
		display_mode(TIME.hour[1], TIME.hour[0], TIME.minute[1], TIME.minute[0], 0);
 494:	00 e0       	ldi	r16, 0x00	; 0
 496:	43 81       	ldd	r20, Z+3	; 0x03
 498:	60 81       	ld	r22, Z
 49a:	81 81       	ldd	r24, Z+1	; 0x01
 49c:	bc df       	rcall	.-136    	; 0x416 <display_mode>
 49e:	31 c0       	rjmp	.+98     	; 0x502 <__vector_4+0xae>
	}
	else if(mode == 2)
 4a0:	82 30       	cpi	r24, 0x02	; 2
 4a2:	59 f4       	brne	.+22     	; 0x4ba <__vector_4+0x66>
	{
		TIME.minute[0] |= 0x80;
 4a4:	e0 e7       	ldi	r30, 0x70	; 112
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	22 81       	ldd	r18, Z+2	; 0x02
 4aa:	20 68       	ori	r18, 0x80	; 128
 4ac:	22 83       	std	Z+2, r18	; 0x02
		display_mode(TIME.hour[1], TIME.hour[0], TIME.minute[1], TIME.minute[0], 1);
 4ae:	01 e0       	ldi	r16, 0x01	; 1
 4b0:	43 81       	ldd	r20, Z+3	; 0x03
 4b2:	60 81       	ld	r22, Z
 4b4:	81 81       	ldd	r24, Z+1	; 0x01
 4b6:	af df       	rcall	.-162    	; 0x416 <display_mode>
 4b8:	24 c0       	rjmp	.+72     	; 0x502 <__vector_4+0xae>
	}
	else if(mode == 3)
 4ba:	83 30       	cpi	r24, 0x03	; 3
 4bc:	59 f4       	brne	.+22     	; 0x4d4 <__vector_4+0x80>
	{
		DATE.day[0] |= 0x80;
 4be:	e4 e7       	ldi	r30, 0x74	; 116
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	60 81       	ld	r22, Z
 4c4:	60 68       	ori	r22, 0x80	; 128
 4c6:	60 83       	st	Z, r22
		display_mode(DATE.day[1], DATE.day[0], DATE.month[1], DATE.month[0], 0);
 4c8:	00 e0       	ldi	r16, 0x00	; 0
 4ca:	22 81       	ldd	r18, Z+2	; 0x02
 4cc:	43 81       	ldd	r20, Z+3	; 0x03
 4ce:	81 81       	ldd	r24, Z+1	; 0x01
 4d0:	a2 df       	rcall	.-188    	; 0x416 <display_mode>
 4d2:	17 c0       	rjmp	.+46     	; 0x502 <__vector_4+0xae>
	}
	else if(mode == 4)
 4d4:	84 30       	cpi	r24, 0x04	; 4
 4d6:	59 f4       	brne	.+22     	; 0x4ee <__vector_4+0x9a>
	{
		DATE.day[0] |= 0x80;
 4d8:	e4 e7       	ldi	r30, 0x74	; 116
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	60 81       	ld	r22, Z
 4de:	60 68       	ori	r22, 0x80	; 128
 4e0:	60 83       	st	Z, r22
		display_mode(DATE.day[1], DATE.day[0], DATE.month[1], DATE.month[0], 1);
 4e2:	01 e0       	ldi	r16, 0x01	; 1
 4e4:	22 81       	ldd	r18, Z+2	; 0x02
 4e6:	43 81       	ldd	r20, Z+3	; 0x03
 4e8:	81 81       	ldd	r24, Z+1	; 0x01
 4ea:	95 df       	rcall	.-214    	; 0x416 <display_mode>
 4ec:	0a c0       	rjmp	.+20     	; 0x502 <__vector_4+0xae>
	}
	else if(mode == 5)
 4ee:	85 30       	cpi	r24, 0x05	; 5
 4f0:	41 f4       	brne	.+16     	; 0x502 <__vector_4+0xae>
		display_mode(DATE.yearH[1], DATE.yearH[0], DATE.yearL[1], DATE.yearL[0], 2);
 4f2:	e4 e7       	ldi	r30, 0x74	; 116
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	02 e0       	ldi	r16, 0x02	; 2
 4f8:	26 81       	ldd	r18, Z+6	; 0x06
 4fa:	47 81       	ldd	r20, Z+7	; 0x07
 4fc:	64 81       	ldd	r22, Z+4	; 0x04
 4fe:	85 81       	ldd	r24, Z+5	; 0x05
 500:	8a df       	rcall	.-236    	; 0x416 <display_mode>
}
 502:	ff 91       	pop	r31
 504:	ef 91       	pop	r30
 506:	bf 91       	pop	r27
 508:	af 91       	pop	r26
 50a:	9f 91       	pop	r25
 50c:	8f 91       	pop	r24
 50e:	7f 91       	pop	r23
 510:	6f 91       	pop	r22
 512:	5f 91       	pop	r21
 514:	4f 91       	pop	r20
 516:	3f 91       	pop	r19
 518:	2f 91       	pop	r18
 51a:	0f 91       	pop	r16
 51c:	0f 90       	pop	r0
 51e:	0f be       	out	0x3f, r0	; 63
 520:	0f 90       	pop	r0
 522:	1f 90       	pop	r1
 524:	18 95       	reti

00000526 <max_day_month>:

uint8_t max_day_month(void)
{
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
	uint8_t month = DS1302_get_month();
 52a:	99 de       	rcall	.-718    	; 0x25e <DS1302_get_month>
 52c:	c8 2f       	mov	r28, r24
	uint8_t year = DS1302_get_year();
 52e:	9a de       	rcall	.-716    	; 0x264 <DS1302_get_year>
 530:	d8 2f       	mov	r29, r24
	uint8_t max_day = max_day_in_month[bcd8bin(month)-1];
 532:	8c 2f       	mov	r24, r28
 534:	b6 dd       	rcall	.-1172   	; 0xa2 <bcd8bin>
 536:	e8 2f       	mov	r30, r24
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	e1 5a       	subi	r30, 0xA1	; 161
 53c:	ff 4f       	sbci	r31, 0xFF	; 255
 53e:	80 81       	ld	r24, Z
	
	if( (month == 0x02) && (year % 4 == 0) )
 540:	c2 30       	cpi	r28, 0x02	; 2
 542:	19 f4       	brne	.+6      	; 0x54a <max_day_month+0x24>
 544:	d3 70       	andi	r29, 0x03	; 3
 546:	09 f4       	brne	.+2      	; 0x54a <max_day_month+0x24>
		max_day = 29;
 548:	8d e1       	ldi	r24, 0x1D	; 29
		
	return max_day;
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	08 95       	ret

00000550 <__vector_1>:
#pragma once

ISR(INT0_vect)
{
 550:	1f 92       	push	r1
 552:	0f 92       	push	r0
 554:	0f b6       	in	r0, 0x3f	; 63
 556:	0f 92       	push	r0
 558:	11 24       	eor	r1, r1
 55a:	2f 93       	push	r18
 55c:	3f 93       	push	r19
 55e:	4f 93       	push	r20
 560:	5f 93       	push	r21
 562:	6f 93       	push	r22
 564:	7f 93       	push	r23
 566:	8f 93       	push	r24
 568:	9f 93       	push	r25
 56a:	af 93       	push	r26
 56c:	bf 93       	push	r27
 56e:	cf 93       	push	r28
 570:	ef 93       	push	r30
 572:	ff 93       	push	r31
	clock_mode = 0;
 574:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <clock_mode>
	DS1302_clock_off();
 578:	36 de       	rcall	.-916    	; 0x1e6 <DS1302_clock_off>

	if(++mode > 5)	
 57a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 57e:	8f 5f       	subi	r24, 0xFF	; 255
 580:	86 30       	cpi	r24, 0x06	; 6
 582:	18 f4       	brcc	.+6      	; 0x58a <__vector_1+0x3a>
 584:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 588:	0e c0       	rjmp	.+28     	; 0x5a6 <__vector_1+0x56>
	{
		mode = 0;
 58a:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
		clock_mode = 0;
 58e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <clock_mode>
		DS1302_clock_on();
 592:	22 de       	rcall	.-956    	; 0x1d8 <DS1302_clock_on>
		if(bcd8bin(DS1302_get_day()) > max_day_month())
 594:	61 de       	rcall	.-830    	; 0x258 <DS1302_get_day>
 596:	85 dd       	rcall	.-1270   	; 0xa2 <bcd8bin>
 598:	c8 2f       	mov	r28, r24
 59a:	c5 df       	rcall	.-118    	; 0x526 <max_day_month>
 59c:	8c 17       	cp	r24, r28
 59e:	18 f4       	brcc	.+6      	; 0x5a6 <__vector_1+0x56>
			DS1302_set_day(bin8bcd(max_day_month()));
 5a0:	c2 df       	rcall	.-124    	; 0x526 <max_day_month>
 5a2:	67 dd       	rcall	.-1330   	; 0x72 <bin8bcd>
 5a4:	3c de       	rcall	.-904    	; 0x21e <DS1302_set_day>
	}
}
 5a6:	ff 91       	pop	r31
 5a8:	ef 91       	pop	r30
 5aa:	cf 91       	pop	r28
 5ac:	bf 91       	pop	r27
 5ae:	af 91       	pop	r26
 5b0:	9f 91       	pop	r25
 5b2:	8f 91       	pop	r24
 5b4:	7f 91       	pop	r23
 5b6:	6f 91       	pop	r22
 5b8:	5f 91       	pop	r21
 5ba:	4f 91       	pop	r20
 5bc:	3f 91       	pop	r19
 5be:	2f 91       	pop	r18
 5c0:	0f 90       	pop	r0
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	0f 90       	pop	r0
 5c6:	1f 90       	pop	r1
 5c8:	18 95       	reti

000005ca <__vector_2>:

ISR(INT1_vect)
{
 5ca:	1f 92       	push	r1
 5cc:	0f 92       	push	r0
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	0f 92       	push	r0
 5d2:	11 24       	eor	r1, r1
 5d4:	2f 93       	push	r18
 5d6:	3f 93       	push	r19
 5d8:	4f 93       	push	r20
 5da:	5f 93       	push	r21
 5dc:	6f 93       	push	r22
 5de:	7f 93       	push	r23
 5e0:	8f 93       	push	r24
 5e2:	9f 93       	push	r25
 5e4:	af 93       	push	r26
 5e6:	bf 93       	push	r27
 5e8:	cf 93       	push	r28
 5ea:	ef 93       	push	r30
 5ec:	ff 93       	push	r31
	if(mode == 0)
 5ee:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 5f2:	81 11       	cpse	r24, r1
 5f4:	0c c0       	rjmp	.+24     	; 0x60e <__vector_2+0x44>
//========================================================
//		Инкремент числа с заданными границами
//========================================================
uint8_t inc_circle(uint8_t digit, uint8_t min, uint8_t max)
{
	uint16_t _digit = (int16_t)digit;
 5f6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <clock_mode>
 5fa:	90 e0       	ldi	r25, 0x00	; 0
	_digit++;
 5fc:	01 96       	adiw	r24, 0x01	; 1
	
	if(_digit > max)
 5fe:	83 30       	cpi	r24, 0x03	; 3
 600:	91 05       	cpc	r25, r1
 602:	10 f0       	brcs	.+4      	; 0x608 <__vector_2+0x3e>
		_digit = min;
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	90 e0       	ldi	r25, 0x00	; 0
	{
		clock_mode = inc_circle(clock_mode, 0, 2);
 608:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <clock_mode>
		display_clock_mode();
 60c:	cf de       	rcall	.-610    	; 0x3ac <display_clock_mode>
	}
	if(mode == 1)
 60e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 612:	81 30       	cpi	r24, 0x01	; 1
 614:	59 f4       	brne	.+22     	; 0x62c <__vector_2+0x62>
	{
		uint8_t buf = bcd8bin(DS1302_get_hours());
 616:	1a de       	rcall	.-972    	; 0x24c <DS1302_get_hours>
 618:	44 dd       	rcall	.-1400   	; 0xa2 <bcd8bin>
//========================================================
//		Инкремент числа с заданными границами
//========================================================
uint8_t inc_circle(uint8_t digit, uint8_t min, uint8_t max)
{
	uint16_t _digit = (int16_t)digit;
 61a:	90 e0       	ldi	r25, 0x00	; 0
	_digit++;
 61c:	01 96       	adiw	r24, 0x01	; 1
	
	if(_digit > max)
 61e:	88 31       	cpi	r24, 0x18	; 24
 620:	91 05       	cpc	r25, r1
 622:	10 f0       	brcs	.+4      	; 0x628 <__vector_2+0x5e>
		_digit = min;
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	90 e0       	ldi	r25, 0x00	; 0
		buf = inc_circle(buf, 0, 23);
		DS1302_set_hours(bin8bcd(buf));
 628:	24 dd       	rcall	.-1464   	; 0x72 <bin8bcd>
 62a:	f1 dd       	rcall	.-1054   	; 0x20e <DS1302_set_hours>
	}
	if(mode == 2)
 62c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 630:	82 30       	cpi	r24, 0x02	; 2
 632:	59 f4       	brne	.+22     	; 0x64a <__vector_2+0x80>
	{
		uint8_t buf = bcd8bin(DS1302_get_minutes());
 634:	0e de       	rcall	.-996    	; 0x252 <DS1302_get_minutes>
 636:	35 dd       	rcall	.-1430   	; 0xa2 <bcd8bin>
//========================================================
//		Инкремент числа с заданными границами
//========================================================
uint8_t inc_circle(uint8_t digit, uint8_t min, uint8_t max)
{
	uint16_t _digit = (int16_t)digit;
 638:	90 e0       	ldi	r25, 0x00	; 0
	_digit++;
 63a:	01 96       	adiw	r24, 0x01	; 1
	
	if(_digit > max)
 63c:	8c 33       	cpi	r24, 0x3C	; 60
 63e:	91 05       	cpc	r25, r1
 640:	10 f0       	brcs	.+4      	; 0x646 <__vector_2+0x7c>
		_digit = min;
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	90 e0       	ldi	r25, 0x00	; 0
		buf = inc_circle(buf, 0, 59);
		DS1302_set_minutes(bin8bcd(buf));
 646:	15 dd       	rcall	.-1494   	; 0x72 <bin8bcd>
 648:	e6 dd       	rcall	.-1076   	; 0x216 <DS1302_set_minutes>
	}
	if(mode == 3)
 64a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 64e:	83 30       	cpi	r24, 0x03	; 3
 650:	89 f4       	brne	.+34     	; 0x674 <__vector_2+0xaa>
	{
		uint8_t buf = bcd8bin(DS1302_get_day());
 652:	02 de       	rcall	.-1020   	; 0x258 <DS1302_get_day>
 654:	26 dd       	rcall	.-1460   	; 0xa2 <bcd8bin>
 656:	c8 2f       	mov	r28, r24
		buf = inc_circle(buf, 1, max_day_month());
 658:	66 df       	rcall	.-308    	; 0x526 <max_day_month>
//========================================================
//		Инкремент числа с заданными границами
//========================================================
uint8_t inc_circle(uint8_t digit, uint8_t min, uint8_t max)
{
	uint16_t _digit = (int16_t)digit;
 65a:	2c 2f       	mov	r18, r28
 65c:	30 e0       	ldi	r19, 0x00	; 0
	_digit++;
 65e:	2f 5f       	subi	r18, 0xFF	; 255
 660:	3f 4f       	sbci	r19, 0xFF	; 255
	
	if(_digit > max)
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	82 17       	cp	r24, r18
 666:	93 07       	cpc	r25, r19
 668:	10 f4       	brcc	.+4      	; 0x66e <__vector_2+0xa4>
		_digit = min;
 66a:	21 e0       	ldi	r18, 0x01	; 1
 66c:	30 e0       	ldi	r19, 0x00	; 0
		DS1302_set_day(bin8bcd(buf));
 66e:	82 2f       	mov	r24, r18
 670:	00 dd       	rcall	.-1536   	; 0x72 <bin8bcd>
 672:	d5 dd       	rcall	.-1110   	; 0x21e <DS1302_set_day>
	}
	if(mode == 4)
 674:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 678:	84 30       	cpi	r24, 0x04	; 4
 67a:	59 f4       	brne	.+22     	; 0x692 <__vector_2+0xc8>
	{
		uint8_t buf = bcd8bin(DS1302_get_month());
 67c:	f0 dd       	rcall	.-1056   	; 0x25e <DS1302_get_month>
 67e:	11 dd       	rcall	.-1502   	; 0xa2 <bcd8bin>
//========================================================
//		Инкремент числа с заданными границами
//========================================================
uint8_t inc_circle(uint8_t digit, uint8_t min, uint8_t max)
{
	uint16_t _digit = (int16_t)digit;
 680:	90 e0       	ldi	r25, 0x00	; 0
	_digit++;
 682:	01 96       	adiw	r24, 0x01	; 1
	
	if(_digit > max)
 684:	8d 30       	cpi	r24, 0x0D	; 13
 686:	91 05       	cpc	r25, r1
 688:	10 f0       	brcs	.+4      	; 0x68e <__vector_2+0xc4>
		_digit = min;
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	90 e0       	ldi	r25, 0x00	; 0
		buf = inc_circle(buf, 1, 12);
		DS1302_set_month(bin8bcd(buf));
 68e:	f1 dc       	rcall	.-1566   	; 0x72 <bin8bcd>
 690:	ca dd       	rcall	.-1132   	; 0x226 <DS1302_set_month>
	}
	if(mode == 5)
 692:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 696:	85 30       	cpi	r24, 0x05	; 5
 698:	59 f4       	brne	.+22     	; 0x6b0 <__vector_2+0xe6>
	{
		uint8_t buf = bcd8bin(DS1302_get_year());
 69a:	e4 dd       	rcall	.-1080   	; 0x264 <DS1302_get_year>
 69c:	02 dd       	rcall	.-1532   	; 0xa2 <bcd8bin>
//========================================================
//		Инкремент числа с заданными границами
//========================================================
uint8_t inc_circle(uint8_t digit, uint8_t min, uint8_t max)
{
	uint16_t _digit = (int16_t)digit;
 69e:	90 e0       	ldi	r25, 0x00	; 0
	_digit++;
 6a0:	01 96       	adiw	r24, 0x01	; 1
	
	if(_digit > max)
 6a2:	84 36       	cpi	r24, 0x64	; 100
 6a4:	91 05       	cpc	r25, r1
 6a6:	10 f0       	brcs	.+4      	; 0x6ac <__vector_2+0xe2>
		_digit = min;
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	90 e0       	ldi	r25, 0x00	; 0
		buf = inc_circle(buf, 0, 99);
		DS1302_set_year(bin8bcd(buf));
 6ac:	e2 dc       	rcall	.-1596   	; 0x72 <bin8bcd>
 6ae:	bf dd       	rcall	.-1154   	; 0x22e <DS1302_set_year>
		
	}
	read_package_data_from_ds1302();
 6b0:	68 de       	rcall	.-816    	; 0x382 <read_package_data_from_ds1302>
}
 6b2:	ff 91       	pop	r31
 6b4:	ef 91       	pop	r30
 6b6:	cf 91       	pop	r28
 6b8:	bf 91       	pop	r27
 6ba:	af 91       	pop	r26
 6bc:	9f 91       	pop	r25
 6be:	8f 91       	pop	r24
 6c0:	7f 91       	pop	r23
 6c2:	6f 91       	pop	r22
 6c4:	5f 91       	pop	r21
 6c6:	4f 91       	pop	r20
 6c8:	3f 91       	pop	r19
 6ca:	2f 91       	pop	r18
 6cc:	0f 90       	pop	r0
 6ce:	0f be       	out	0x3f, r0	; 63
 6d0:	0f 90       	pop	r0
 6d2:	1f 90       	pop	r1
 6d4:	18 95       	reti

000006d6 <_exit>:
 6d6:	f8 94       	cli

000006d8 <__stop_program>:
 6d8:	ff cf       	rjmp	.-2      	; 0x6d8 <__stop_program>
